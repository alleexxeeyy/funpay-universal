import math
import textwrap
from uuid import UUID
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.modules import Module, get_modules, get_module_by_uuid

from .. import callback_datas as calls


def modules_text():
    modules = get_modules()
    txt = textwrap.dedent(f"""
        üîå <b>–ú–æ–¥—É–ª–∏</b>
        –í—Å–µ–≥–æ <b>{len(modules)}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üì
    """)
    return txt


def modules_kb(page: int = 0):
    modules = get_modules()
    rows = []
    items_per_page = 7
    total_pages = math.ceil(len(modules) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for module in list(modules)[start_offset:end_offset]:
        rows.append([InlineKeyboardButton(text=module.meta.name, callback_data=calls.ModulePage(uuid=module.uuid).pack())])

    buttons_row = []
    if page > 0: btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.ModulesPagination(page=page - 1).pack())
    else: btn_back = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_back)

    buttons_row.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="enter_module_page"))

    if page < total_pages - 1: btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.ModulesPagination(page=page+1).pack())
    else: btn_next = InlineKeyboardButton(text="üõë", callback_data="123")
    buttons_row.append(btn_next)
    rows.append(buttons_row)

    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.MenuNavigation(to="default").pack())])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def module_page_text(module_uuid: UUID):
    module: Module = get_module_by_uuid(module_uuid)
    if not module: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
    txt = textwrap.dedent(f"""
        üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>

        <b>–ú–æ–¥—É–ª—å</b> <code>{module.meta.name}</code>:          
        ‚î£ UUID: <b>{module.uuid}</b>
        ‚î£ –í–µ—Ä—Å–∏—è: <b>{module.meta.version}</b>
        ‚î£ –û–ø–∏—Å–∞–Ω–∏–µ: <blockquote>{module.meta.description}</blockquote>
        ‚î£ –ê–≤—Ç–æ—Ä—ã: <b>{module.meta.authors}</b>
        ‚îó –°—Å—ã–ª–∫–∏: <b>{module.meta.links}</b>

        üîå <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω' if module.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì
    """)
    return txt


def module_page_kb(module_uuid: UUID, page: int = 0):
    module: Module = get_module_by_uuid(module_uuid)
    if not module: raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
    rows = [
        [InlineKeyboardButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if module.enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å", callback_data="switch_module_enabled")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reload_module")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.ModulesPagination(page=page).pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.ModulePage(uuid=module_uuid).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def module_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>
        \n{placeholder}
    """)
    return txt