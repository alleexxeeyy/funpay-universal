import math
import textwrap
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from settings import Settings as sett

from .. import callback_datas as calls


def settings_delivs_text():
    auto_deliveries = sett.get("auto_deliveries")
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí üöÄ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b>
        –í—Å–µ–≥–æ <b>{len(auto_deliveries.keys())}</b> –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ

        –ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ª–æ—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≥–æ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ ‚Üì
    """)
    return txt


def settings_delivs_kb(page: int = 0):
    auto_deliveries = sett.get("auto_deliveries")
    rows = []
    items_per_page = 7
    total_pages = math.ceil(len(auto_deliveries.keys()) / items_per_page)
    total_pages = total_pages if total_pages > 0 else 1

    if page < 0: page = 0
    elif page >= total_pages: page = total_pages - 1

    start_offset = page * items_per_page
    end_offset = start_offset + items_per_page

    for lot_id in list(auto_deliveries.keys())[start_offset:end_offset]:
        auto_delivery_text = "\n".join(auto_deliveries[lot_id])
        rows.append([InlineKeyboardButton(text=f"{lot_id} ‚Üí {auto_delivery_text}", callback_data=calls.AutoDeliveryPage(lot_id=lot_id).pack())])

    if total_pages > 1:
        buttons_row = []
        btn_back = InlineKeyboardButton(text="‚Üê", callback_data=calls.AutoDeliveriesPagination(page=page-1).pack()) if page > 0 else InlineKeyboardButton(text="üõë", callback_data="123")
        buttons_row.append(btn_back)

        btn_pages = InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="enter_auto_deliveries_page")
        buttons_row.append(btn_pages)

        btn_next = InlineKeyboardButton(text="‚Üí", callback_data=calls.AutoDeliveriesPagination(page=page+1).pack()) if page < total_pages - 1 else InlineKeyboardButton(text="üõë", callback_data="123")
        buttons_row.append(btn_next)
        
        rows.append(buttons_row)
        
    rows.append([InlineKeyboardButton(text="‚ûïüöÄ –î–æ–±–∞–≤–∏—Ç—å", callback_data="enter_new_auto_delivery_lot_id")])
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.SettingsNavigation(to="default").pack()),
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.AutoDeliveriesPagination(page=page).pack())
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def settings_delivs_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Üí ‚å®Ô∏è <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b>
        \n{placeholder}
    """)
    return txt


def settings_new_deliv_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        üöÄ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>
        \n{placeholder}
    """)
    return txt


def settings_deliv_page_text(lot_id: int):
    auto_deliveries = sett.get("auto_deliveries")
    auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>

        üÜî <b>ID –ª–æ—Ç–∞:</b> {lot_id}
        üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> 
        <blockquote>{auto_delivery_message}</blockquote>

        –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì
    """)
    return txt


def settings_deliv_page_kb(lot_id: int, page: int = 0):
    auto_deliveries = sett.get("auto_deliveries")
    auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    rows = [
        [InlineKeyboardButton(text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {auto_delivery_message}", callback_data="enter_auto_delivery_message")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É", callback_data="confirm_deleting_auto_delivery")],
        [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=calls.AutoDeliveriesPagination(page=page).pack()), 
        InlineKeyboardButton(text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=calls.AutoDeliveryPage(lot_id=lot_id).pack())
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    return kb


def settings_deliv_page_float_text(placeholder: str):
    txt = textwrap.dedent(f"""
        ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>
        \n{placeholder}
    """)
    return txt