from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import math
from datetime import datetime

import tgbot.callback_datas.user_callback_datas as CallbackDatas

from fpbot.funpaybot import FunPayBot
from fpbot.data import Data

from settings import Config, Messages, CustomCommands, AutoDeliveries

from bot_settings.app import CURRENT_VERSION
from fpbot.utils.stats import get_stats

from core.modules_manager import ModulesManager, Module
from uuid import UUID

from FunPayAPI import types as fpapi_types

funpaybot = FunPayBot()
        
class System:
    """ –®–∞–±–ª–æ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π """
    class Error:
        def text(error_text) -> str:
            msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <b>{error_text}</b>"
            return msg

class Navigation:
    """ –®–∞–±–ª–æ–Ω—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É """

    class MenuNavigation:
        class Default:
            def text() -> str:
                msg = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>" \
                    f"\n" \
                    f"\n<b>FunPay UNIVERSAL</b> v{CURRENT_VERSION} " \
                    f"\n–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è FunPay" \
                    f"\n" \
                    f"\n<b>–°—Å—ã–ª–∫–∏:</b>" \
                    f"\n‚Üí <b>@alleexxeeyy</b> ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" \
                    f"\n‚Üí <b>@alexeyproduction</b> ‚Äî –∫–∞–Ω–∞–ª, –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏" \
                    f"\n‚Üí <b>@alexey_production_bot</b> ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π" \
                    f"\n" \
                    f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data=CallbackDatas.SettingsNavigation(
                        to="default"
                    ).pack()
                )
                btn2 = InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="stats"
                    ).pack()
                )
                btn3 = InlineKeyboardButton(
                    text="üîå –ú–æ–¥—É–ª–∏",
                    callback_data=CallbackDatas.ModulesPagination(
                        page=0
                    ).pack()
                )
                btn4 = InlineKeyboardButton(
                    text="üõí –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
                    callback_data=CallbackDatas.ActiveOrdersPagination(
                        page=0
                    ).pack()
                )
                btn5 = InlineKeyboardButton(
                    text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    callback_data=CallbackDatas.InstructionNavigation(
                        to="default"
                    ).pack()
                )
                btn6 = InlineKeyboardButton(
                    text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    url="https://t.me/alleexxeeyy",
                )
                btn7 = InlineKeyboardButton(
                    text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª",
                    url="https://t.me/alexeyproduction",
                )
                btn8 = InlineKeyboardButton(
                    text="ü§ñ –ù–∞—à –±–æ—Ç",
                    url="https://t.me/alexey_production_bot",
                )
                rows = [[btn1, btn2], [btn3, btn4], [btn5], [btn6, btn7, btn8]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
                
        class Stats:
            class Error:
                def text() -> str:
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FunPay –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FunPay –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                
            class Default:
                def text() -> str:
                    stats = get_stats()
                    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FunPay –±–æ—Ç–∞</b>" \
                        f"\n" \
                        f"\n‚Üí –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: <code>{stats['bot_launch_time'].strftime('%d.%m.%Y %H:%M:%S')}</code>" \
                        f"\n" \
                        f"\n‚Üí –ü—Ä–æ–¥–∞–∂: <code>{stats['orders_completed']}</code>" \
                        f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{stats['active_orders']}</code>" \
                        f"\n‚Üí –í–æ–∑–≤—Ä–∞—Ç–æ–≤: <code>{stats['orders_refunded']}</code>" \
                        f"\n‚Üí –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{stats['earned_money']}</code> —Ä." \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                    
                def kb() -> InlineKeyboardMarkup:
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="stats"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
    class InstructionNavigation:
        class Default:
            def text() -> str:
                msg = "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>" \
                    "\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º" \
                    "\n" \
                    "\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã",
                    callback_data=CallbackDatas.InstructionNavigation(
                        to="commands"
                    ).pack()
                )
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1], [btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Commands:
            def text() -> str:
                msg = "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí ‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã</b>" \
                    "\n" \
                    "\n<b>–ö–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>" \
                    "\n‚Üí <code>!–∫–æ–º–∞–Ω–¥—ã</code> ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–∞–º–∏" \
                    "\n‚Üí <code>!–ø—Ä–æ–¥–∞–≤–µ—Ü</code> ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º (–ø–∏—à–µ—Ç –≤–∞–º –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–º–æ—â–∏)" \
                    "\n" \
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                return msg
            
            def kb() -> InlineKeyboardMarkup:
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="instruction"
                    ).pack()
                )
                rows = [[btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup

    class SettingsNavigation:
        class Default:
            def text() -> str:
                msg = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FunPay –±–æ—Ç–∞</b>" \
                    "\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞" \
                    "\n" \
                    "\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞",
                    callback_data=CallbackDatas.BotSettingsNavigation(
                        to="default"
                    ).pack()
                )
                btn2 = InlineKeyboardButton(
                    text="üì∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤",
                    callback_data=CallbackDatas.LotsSettingsNavigation(
                        to="default"
                    ).pack(),
                )
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1], [btn2], [btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup

        class BotSettings:
            class Default:
                class Loading:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                            f"\n" \
                            f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>" \
                            f"\n‚Üí golden_key: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí user_agent: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                        return msg
                    
                class Error:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                            f"\n" \
                            f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>" \
                            f"\n‚Üí golden_key: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí user_agent: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                        return msg
                    
                class Default:
                    def text() -> str:
                        config = Config.get()
                        golden_key = config["golden_key"][:3] + "*" * (len(config["golden_key"]) - 3) if config["golden_key"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        user_agent = config["user_agent"] if config["user_agent"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>" \
                            f"\n" \
                            f"\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>:" \
                            f"\n‚Üí golden_key: <code>{golden_key}</code>" \
                            f"\n‚Üí user_agent: <code>{user_agent}</code>" \
                            f"\n" \
                            f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                        return msg
                    
                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="authorization"
                            ).pack()
                        )
                        btn2 = InlineKeyboardButton(
                            text="üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="connection"
                            ).pack()
                        )
                        btn3 = InlineKeyboardButton(
                            text="üé´ –õ–æ—Ç—ã",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="lots"
                            ).pack()
                        )
                        btn4 = InlineKeyboardButton(
                            text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è",
                            callback_data=CallbackDatas.MessagesPagination(
                                page=0
                            ).pack()
                        )
                        btn5 = InlineKeyboardButton(
                            text="‚å®Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                            callback_data=CallbackDatas.CustomCommandsPagination(
                                page=0
                            ).pack()
                        )
                        btn6 = InlineKeyboardButton(
                            text="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞",
                            callback_data=CallbackDatas.AutoDeliveriesPagination(
                                page=0
                            ).pack()
                        )
                        btn7 = InlineKeyboardButton(
                            text="üîß –ü—Ä–æ—á–µ–µ",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="other"
                            ).pack()
                        )
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.MenuNavigation(
                                to="settings"
                            ).pack()
                        )
                        rows = [[btn1, btn2], [btn3, btn4], [btn5], [btn6], [btn7], [btn_refresh], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                
            class Authorization:
                class Error:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                              f"\n" \
                              f"\n‚Üí golden_key: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí user_agent: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                    
                class Loading:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                              f"\n" \
                              f"\n‚Üí golden_key: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí user_agent: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                        
                class Default:
                    def text() -> str:
                        config = Config.get()
                        user_agent = config["user_agent"] if config["user_agent"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        golden_key = config["golden_key"][:3] + "*" * (len(config['golden_key']) - 3) if config["golden_key"] else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>"\
                              f"\n" \
                              f"\n‚Üí golden_key: <code>{golden_key}</code>" \
                              f"\n‚Üí user_agent: <code>{user_agent}</code>" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg
                    
                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="üîë golden_key",
                            callback_data="enter_golden_key"
                        )
                        btn2 = InlineKeyboardButton(
                            text="üé© user_agent",
                            callback_data="enter_user_agent"
                        )
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="authorization"
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows = [[btn1, btn2], [btn_refresh], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class EnterGoldenKey:
                    def text() -> str:
                        config = Config.get()
                        msg = f"üîë <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π golden_key –≤–∞—à–µ–≥–æ FunPay –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Üì</b>" \
                              f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['golden_key']}</code>"
                        return msg
                    
                class GoldenKeyChanged:
                    def text(new):
                        msg = f"‚úÖ <b>golden_key</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code>"
                        return msg
                    
                class EnterUserAgent:
                    def text() -> str:
                        config = Config.get()
                        user_agent = config["user_agent"] if config["user_agent"] != "" else "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
                        msg = f"üé© <b>–í–≤–µ–¥–∏—Çe –Ω–æ–≤—ã–π user_agent –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ‚Üì</b>" \
                              f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{user_agent}</code>"
                        return msg
                    
                class UserAgentChanged:
                    def text(new):
                        msg = f"‚úÖ <b>user_agent</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code>"
                        return msg
                    
            class Connection:
                class Error:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                              f"\n" \
                              f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com?</b>" \
                              f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ FunPay. " \
                              f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                              f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com?</b>" \
                              f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ FunPay –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                              f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ FunPay –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                              f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                              f"\n" \
                              f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com?</b>" \
                              f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ FunPay. " \
                              f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                              f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com?</b>" \
                              f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ FunPay –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                              f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ FunPay –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                              f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Default:
                    def text() -> str:
                        config = Config.get()

                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>"\
                              f"\n" \
                              f"\n‚Üí –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com: <code>{config['funpayapi_timeout']}</code> —Å–µ–∫." \
                              f"\n‚Üí –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com: <code>{config['runner_requests_delay']}</code> —Å–µ–∫." \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com?</b>" \
                              f"\n–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞ FunPay. " \
                              f"–ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∞ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à—ë–ª - –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, " \
                              f"—É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com?</b>" \
                              f"\n–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ FunPay –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π. " \
                              f"–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ FunPay –ø–æ–ø—Ä–æ—Å—Ç—É –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –≤–∞—à IP " \
                              f"–∞–¥—Ä–µ—Å, –∏ –≤—ã —É–∂–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="üõú –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                            callback_data="enter_funpayapi_timeout"
                        )
                        btn2 = InlineKeyboardButton(
                            text="‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤",
                            callback_data="enter_runner_requests_delay"
                        )
                        btn_update = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="connection"
                            ).pack()
                        )
                        btn_back = InlineKeyboardButton(
                            text="‚Üê –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows = [[btn1], [btn2], [btn_update], [btn_back]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                
                class EnterFunpayApiTimeout:
                    def text() -> str:
                        config = Config.get()
                        msg = f"üõú <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com ‚Üì</b>" \
                              f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['funpayapi_timeout']}</code> —Å–µ–∫."
                        return msg
                    
                class FunpayApiTimeoutChanged:
                    def text(new):
                        msg = f"‚úÖ <b>–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ funpay.com</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code> —Å–µ–∫."
                        return msg
                
                class EnterRunnerRequestsDelay:
                    def text() -> str:
                        config = Config.get()
                        msg = f"‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com ‚Üì</b>" \
                              f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['runner_requests_delay']}</code> —Å–µ–∫."
                        return msg
                    
                class RunnerRequestsDelayChanged:
                    def text(new):
                        msg = f"‚úÖ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ funpay.com</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <code>{new}</code> —Å–µ–∫."
                        return msg

            class Lots:
                class Error:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üé´ –õ–æ—Ç—ã</b>"\
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üé´ –õ–æ—Ç—ã</b>"\
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                        return msg

                class Default:
                    def text() -> str:
                        config = Config.get()
                        auto_raising_lots_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_raising_lots_enabled"] == True else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                        
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üé´ –õ–æ—Ç—ã</b>"\
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤: <code>{auto_raising_lots_enabled}</code>" \
                              f"\n‚Üí –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤: <code>{config['lots_saving_interval']}</code> —Å–µ–∫." \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        config = Config.get()
                        rows = []
                        
                        if config["auto_raising_lots_enabled"]:
                            btn_disable = InlineKeyboardButton(
                                text="üî¥ –í–´–ö–õ –ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤",
                                callback_data="disable_auto_raising_lots"
                            )
                            rows.append([btn_disable])
                        else:
                            btn_enable = InlineKeyboardButton(
                                text="üü¢ –í–ö–õ –ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤",
                                callback_data="enable_auto_raising_lots"
                            )
                            rows.append([btn_enable])
                        btn1 = InlineKeyboardButton(
                            text="‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤",
                            callback_data="enter_lots_saving_interval"
                        )
                        rows.append([btn1])
                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="lots"
                            ).pack()
                        )
                        rows.append([btn_refresh])
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows.append([btn_back])
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class EnterLotsSavingInterval:
                    def text() -> str:
                        config = Config.get()
                        msg = f"‚è≤Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤ ‚Üì</b>" \
                              f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['lots_saving_interval']}</code> —Å–µ–∫."
                        return msg
                    
                class LotsSavingIntervalChanged:
                    def text(new) -> str:
                        msg = f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ—Ç–æ–≤</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code>{new}</code>" 
                        return msg
                    
            class CustomCommands:
                class Pagination:
                    def text() -> str:
                        custom_commands = CustomCommands.get()
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí ‚å®Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>" \
                              f"\n–í—Å–µ–≥–æ <b>{len(custom_commands.keys())}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                              f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì"
                        return msg
                    
                    def kb(page: int = 0) -> InlineKeyboardMarkup:
                        custom_commands = CustomCommands.get()

                        rows = []
                        items_per_page = 7
                        total_pages = math.ceil(len(custom_commands.keys())/items_per_page)
                        total_pages = total_pages if total_pages > 0 else 1

                        if page < 0:
                            page = 0
                        elif page >= total_pages:
                            page = total_pages-1

                        start_offset = page * items_per_page
                        end_offset = start_offset + items_per_page

                        for command in list(custom_commands.keys())[start_offset:end_offset]:
                            btn = InlineKeyboardButton(
                                text=f'{command} ‚Üí {" ".join(custom_commands[command])[:64]}',
                                callback_data=CallbackDatas.CustomCommandPage(
                                    command=command
                                ).pack()
                            )
                            rows.append([btn])
                            
                        buttons_row = []
                        if page > 0:
                            btn_back = InlineKeyboardButton(
                                text="‚Üê",
                                callback_data=CallbackDatas.CustomCommandsPagination(
                                    page=page-1
                                ).pack()
                            )
                        else:
                            btn_back = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_back)
                            
                        btn_pages = InlineKeyboardButton(
                            text=f"{page+1}/{total_pages}",
                            callback_data="enter_custom_command_page"
                        )
                        buttons_row.append(btn_pages)
                        
                        if page < total_pages-1:
                            btn_next = InlineKeyboardButton(
                                text="‚Üí",
                                callback_data=CallbackDatas.CustomCommandsPagination(
                                    page=page+1
                                ).pack()
                            )
                        else:
                            btn_next = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_next)
                        rows.append(buttons_row)

                        btn1 = InlineKeyboardButton(
                            text="‚ûï‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É",
                            callback_data="enter_custom_command"
                        )
                        rows.append([btn1])
                        btn2 = InlineKeyboardButton(
                            text="üö™ –í—ã—Ö–æ–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows.append([btn2])
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class Page:
                    class Error:
                        def text() -> str:
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                                f"\n" \
                                f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n‚Üí –û—Ç–≤–µ—Ç: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Loading:
                        def text() -> str:
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                                f"\n" \
                                f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n‚Üí –û—Ç–≤–µ—Ç: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Default:
                        def text(command: str) -> str:
                            custom_commands = CustomCommands.get()
                            command_text = "\n".join(custom_commands[command])
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                                f"\n" \
                                f"\n‚Üí –ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                                f"\n‚Üí –û—Ç–≤–µ—Ç: \n<blockquote>{command_text}</blockquote>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg
                        
                        def kb(command, page) -> InlineKeyboardMarkup:
                            btn1 = InlineKeyboardButton(
                                text="‚úçÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
                                callback_data="enter_new_custom_command_answer"
                            )
                            btn2 = InlineKeyboardButton(
                                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                                callback_data="confirm_deleting_custom_command"
                            )
                            btn_refresh = InlineKeyboardButton(
                                text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                                callback_data=CallbackDatas.CustomCommandPage(
                                    command=command
                                ).pack()
                            )
                            btn_back = InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data=CallbackDatas.CustomCommandsPagination(
                                    page=page
                                ).pack()
                            )
                            rows = [[btn1, btn2], [btn_refresh], [btn_back]]
                            markup = InlineKeyboardMarkup(inline_keyboard=rows)
                            return markup
                    
                class EnterCustomCommandsPage:
                    def text() -> str:
                        msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                        return msg
                    
                class EnterCustomCommand:
                    def text() -> str:
                        msg = f"‚å®Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚Üì</b>" \
                              f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –µ–º—É –≤—ã–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç"
                        return msg
                    
                class EnterCustomCommandAnswer:
                    def text() -> str:
                        msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã ‚Üì</b>" \
                              f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–∫—É–ø—Ç–∞–µ–ª—é –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã"
                        return msg
                    
                class ConfirmAddingCustomCommand:
                    def text(command, command_answer) -> str:
                        msg = f"‚ûï‚å®Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                              f"\n–ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                              f"\n–û—Ç–≤–µ—Ç: <blockquote>{command_answer}</blockquote>"
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data="add_custom_command"
                        )
                        btn2 = InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="destroy"
                        )
                        rows = [[btn1, btn2]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class CustomCommandAdded:
                    def text(command) -> str:
                        msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ <code>{command}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>" 
                        return msg
                    
                class EnterNewCustomCommandAnswer:
                    def text(command) -> str:
                        custom_commands = CustomCommands.get()
                        command_answer = "\n".join(custom_commands[command])
                        msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ‚Üì</b>" \
                              f"\n–ö–æ–º–∞–Ω–¥–∞: <code>{command}</code>" \
                              f"\n–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: <blockquote>{command_answer}</blockquote>"
                        return msg
                    
                class CustomCommandAnswerChanged:
                    def text(new, command) -> str:
                        msg = f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <code>{command}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                        return msg
                    
                class ConfirmDeletingCustomCommand:
                    def text(command) -> str:
                        msg = f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b>" \
                            f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É <code>{command}</code>" 
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data="delete_custom_command"
                        )
                        btn2 = InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="destroy"
                        )
                        rows = [[btn1, btn2]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class CustomComandDeleted:
                    def text(command) -> str:
                        msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ <code>{command}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>" 
                        return msg
                    
            class AutoDeliveries:
                class Pagination:
                    def text() -> str:
                        auto_deliveries = AutoDeliveries.get()
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí üöÄ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞</b>" \
                              f"\n–í—Å–µ–≥–æ <b>{len(auto_deliveries.keys())}</b> –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                              f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –ª–æ—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≥–æ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ ‚Üì"
                        return msg
                    
                    def kb(page: int = 0) -> InlineKeyboardMarkup:
                        auto_deliveries = AutoDeliveries.get()

                        rows = []
                        items_per_page = 7
                        total_pages = math.ceil(len(auto_deliveries.keys())/items_per_page)
                        total_pages = total_pages if total_pages > 0 else 1

                        if page < 0:
                            page = 0
                        elif page >= total_pages:
                            page = total_pages-1

                        start_offset = page * items_per_page
                        end_offset = start_offset + items_per_page

                        for lot_id in list(auto_deliveries.keys())[start_offset:end_offset]:
                            auto_delivery_text = " ".join(auto_deliveries[lot_id])
                            btn = InlineKeyboardButton(
                                text=f"{lot_id} ‚Üí {auto_delivery_text[:64]}",
                                callback_data=CallbackDatas.AutoDeliveryPage(
                                    lot_id=lot_id
                                ).pack()
                            )
                            rows.append([btn])
                            
                        buttons_row = []
                        if page > 0:
                            btn_back = InlineKeyboardButton(
                                text="‚Üê",
                                callback_data=CallbackDatas.AutoDeliveriesPagination(
                                    page=page-1
                                ).pack()
                            )
                        else:
                            btn_back = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_back)
                            
                        btn_pages = InlineKeyboardButton(
                            text=f"{page+1}/{total_pages}",
                            callback_data="enter_auto_deliveries_page"
                        )
                        buttons_row.append(btn_pages)
                        
                        if page < total_pages-1:
                            btn_next = InlineKeyboardButton(
                                text="‚Üí",
                                callback_data=CallbackDatas.AutoDeliveriesPagination(
                                    page=page+1
                                ).pack()
                            )
                        else:
                            btn_next = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_next)
                        rows.append(buttons_row)

                        btn1 = InlineKeyboardButton(
                            text="‚ûïüöÄ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                            callback_data="enter_auto_delivery_lot_id"
                        )
                        rows.append([btn1])
                        btn2 = InlineKeyboardButton(
                            text="üö™ –í—ã—Ö–æ–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows.append([btn2])
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class Page:
                    class Error:
                        def text() -> str:
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                                f"\n" \
                                f"\n‚Üí ID –ª–æ—Ç–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Loading:
                        def text() -> str:
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                                f"\n" \
                                f"\n‚Üí ID –ª–æ—Ç–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Default:
                        def text(lot_id: str) -> str:
                            auto_deliveries = AutoDeliveries.get()
                            auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)])
                            msg = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                                f"\n" \
                                f"\n‚Üí ID –ª–æ—Ç–∞: <code>{lot_id}</code>" \
                                f"\n‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: \n<blockquote>{auto_delivery_message}</blockquote>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg
                        
                        def kb(lot_id, page) -> InlineKeyboardMarkup:
                            btn1 = InlineKeyboardButton(
                                text="‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏",
                                callback_data="enter_new_auto_delivery_message"
                            )
                            btn2 = InlineKeyboardButton(
                                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                                callback_data="confirm_deleting_auto_delivery"
                            )
                            btn_refresh = InlineKeyboardButton(
                                text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                                callback_data=CallbackDatas.AutoDeliveryPage(
                                    lot_id=lot_id
                                ).pack()
                            )
                            btn_back = InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data=CallbackDatas.AutoDeliveriesPagination(
                                    page=page
                                ).pack()
                            )
                            rows = [[btn1], [btn2], [btn_refresh], [btn_back]]
                            markup = InlineKeyboardMarkup(inline_keyboard=rows)
                            return markup
                    
                class EnterAutoDeliveryPage:
                    def text() -> str:
                        msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                        return msg
                    
                class EnterAutoDeliveryLotId:
                    def text() -> str:
                        msg = f"üé´ <b>–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ ‚Üì</b>" \
                              f"\nID –ª–æ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∞"
                        return msg
                    
                class EnterAutoDeliveryMessage:
                    def text() -> str:
                        msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Üì</b>" \
                              f"\n–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–∫—É–ø—Ç–∞–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞"
                        return msg
                    
                class ConfirmAddingAutoDelivery:
                    def text(lot_id, message) -> str:
                        msg = f"‚ûïüöÄ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                              f"\nID –ª–æ—Ç–∞: <code>{lot_id}</code>" \
                              f"\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <blockquote>{message}</blockquote>"
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data="add_auto_delivery"
                        )
                        btn2 = InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="destroy"
                        )
                        rows = [[btn1, btn2]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class AutoDeliveryAdded:
                    def text(lot_id) -> str:
                        msg = f"‚úÖ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–∞ –ª–æ—Ç <code>{lot_id}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>" 
                        return msg
                    
                class EnterNewAutoDeliveryMessage:
                    def text(lot_id) -> str:
                        auto_deliveries = AutoDeliveries.get()
                        auto_delivery_message = "\n".join(auto_deliveries[str(lot_id)])
                        msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ ‚Üì</b>" \
                              f"\nID –ª–æ—Ç–∞: <code>{lot_id}</code>" \
                              f"\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <blockquote>{auto_delivery_message}</blockquote>"
                        return msg
                    
                class AutoDeliveryMessageChanged:
                    def text(new, lot_id) -> str:
                        msg = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–∞ <code>{lot_id}</code> <b>–±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                        return msg
                    
                class ConfirmDeletingAutoDelivery:
                    def text(lot_id) -> str:
                        msg = f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b>" \
                              f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É –Ω–∞ –ª–æ—Ç <code>{lot_id}</code>" 
                        return msg

                    def kb() -> InlineKeyboardMarkup:
                        btn1 = InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data="delete_auto_delivery"
                        )
                        btn2 = InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="destroy"
                        )
                        rows = [[btn1, btn2]]
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class AutoDeliveryDeleted:
                    def text(lot_id) -> str:
                        msg = f"‚úÖ –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–∞ –ª–æ—Ç <code>{lot_id}</code> <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>" 
                        return msg
                
            class Messages:
                class Pagination:
                    def text() -> str:
                        messages = Messages.get()
                        if not messages:
                            raise Exception("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b> ‚Üí ‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>" \
                              f"\n–í—Å–µ–≥–æ <b>{len(messages.keys())}</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ" \
                              f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üì"
                        return msg
                    
                    def kb(page: int = 0) -> InlineKeyboardMarkup:
                        messages = Messages.get()
                        if not messages:
                            raise Exception("–í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

                        rows = []
                        items_per_page = 8
                        total_pages = math.ceil(len(messages.keys())/items_per_page)
                        total_pages = total_pages if total_pages > 0 else 1

                        if page < 0:
                            page = 0
                        elif page >= total_pages:
                            page = total_pages-1

                        start_offset = page * items_per_page
                        end_offset = start_offset + items_per_page

                        for message in list(messages.keys())[start_offset:end_offset]:
                            btn = InlineKeyboardButton(
                                text=message,
                                callback_data=CallbackDatas.MessagePage(
                                    message_id=message
                                ).pack()
                            )
                            rows.append([btn])
                            
                        buttons_row = []
                        if page > 0:
                            btn_back = InlineKeyboardButton(
                                text="‚Üê",
                                callback_data=CallbackDatas.MessagesPagination(
                                    page=page-1
                                ).pack()
                            )
                        else:
                            btn_back = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_back)

                            
                        btn_pages = InlineKeyboardButton(
                            text=f"{page+1}/{total_pages}",
                            callback_data="enter_messages_page"
                        )
                        buttons_row.append(btn_pages)
                        
                        if page < total_pages-1:
                            btn_next = InlineKeyboardButton(
                                text="‚Üí",
                                callback_data=CallbackDatas.MessagesPagination(
                                    page=page+1
                                ).pack()
                            )
                        else:
                            btn_next = InlineKeyboardButton(
                                text="üõë",
                                callback_data="123"
                            )
                        buttons_row.append(btn_next)
                        rows.append(buttons_row)

                        btn1 = InlineKeyboardButton(
                            text="üö™ –í—ã—Ö–æ–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows.append([btn1])
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
                class Page:
                    class Error:
                        def text() -> str:
                            msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                                f"\n" \
                                f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Loading:
                        def text() -> str:
                            msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                                f"\n" \
                                f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg

                    class Default:
                        def text(message_id) -> str:
                            messages = Messages.get()
                            message_text = "\n".join(messages[message_id])
                            msg = f"‚úíÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>" \
                                f"\n" \
                                f"\n‚Üí ID —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{message_id}</code>" \
                                f"\n‚Üí –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n<blockquote>{message_text}</blockquote>" \
                                f"\n" \
                                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                            return msg
                        
                        def kb(message_id, page) -> InlineKeyboardMarkup:
                            btn1 = InlineKeyboardButton(
                                text="‚úçÔ∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                                callback_data="enter_message_text"
                            )
                            btn_refresh = InlineKeyboardButton(
                                text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                                callback_data=CallbackDatas.MessagePage(
                                    message_id=message_id
                                ).pack()
                            )
                            btn_back = InlineKeyboardButton(
                                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data=CallbackDatas.MessagesPagination(
                                    page=page
                                ).pack()
                            )
                            rows = [[btn1], [btn_refresh], [btn_back]]
                            markup = InlineKeyboardMarkup(inline_keyboard=rows)
                            return markup
                    
                class EnterMessagesPage:
                    def text() -> str:
                        msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                        return msg
                    
                class EnterMessageText:
                    def text(message_id) -> str:
                        messages = Messages.get()
                        message_text = "\n".join(messages[message_id])
                        msg = f"‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üì</b>" \
                              f"\nID —Å–æ–æ–±—â–µ–Ω–∏—è: \n<code>{message_id}</code>" \
                              f"\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: \n<blockquote>{message_text}</blockquote>"
                        return msg
                    
                class MessageTextChanged:
                    def text(new, message_id) -> str:
                        msg = f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è <code>{message_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> –Ω–∞:\n<blockquote>{new}</blockquote>" 
                        return msg
                    
            class Other:
                class Error:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n‚Üí –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã?</b>" \
                              f"\n–ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ. " \
                              f"–í –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞." \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                        return msg

                class Loading:
                    def text() -> str:
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n‚Üí –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã?</b>" \
                              f"\n–ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ. " \
                              f"–í –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞." \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                        return msg

                class Default:
                    def text() -> str:
                        config = Config.get()
                        auto_reviews_replies_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_reviews_replies_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                        first_message_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["first_message_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                        custom_commands_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["custom_commands_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                        auto_deliveries_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["auto_deliveries_enabled"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                        msg = f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚Üí üîß –ü—Ä–æ—á–µ–µ</b>" \
                              f"\n" \
                              f"\n‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã: <code>{auto_reviews_replies_enabled}</code>" \
                              f"\n‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{first_message_enabled}</code>" \
                              f"\n‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: <code>{custom_commands_enabled}</code>" \
                              f"\n‚Üí –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞: <code>{auto_deliveries_enabled}</code>" \
                              f"\n" \
                              f"\n<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã?</b>" \
                              f"\n–ö–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ. " \
                              f"–í –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞." \
                              f"\n" \
                              f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì" 
                        return msg
                    
                    def kb() -> InlineKeyboardMarkup:
                        config = Config.get()
                        rows = []

                        if config["auto_reviews_replies_enabled"]:
                            btn_disable = InlineKeyboardButton(
                                text="üî¥ –í–´–ö–õ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã",
                                callback_data="disable_auto_reviews_replies"
                            )
                            rows.append([btn_disable])
                        else:
                            btn_enable = InlineKeyboardButton(
                                text="üü¢ –í–ö–õ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã",
                                callback_data="enable_auto_reviews_replies"
                            )
                            rows.append([btn_enable])

                        if config["first_message_enabled"]:
                            btn_disable = InlineKeyboardButton(
                                text="üî¥ –í–´–ö–õ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                callback_data="disable_first_message"
                            )
                            rows.append([btn_disable])
                        else:
                            btn_enable = InlineKeyboardButton(
                                text="üü¢ –í–ö–õ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                callback_data="enable_first_message"
                            )
                            rows.append([btn_enable])

                        if config["custom_commands_enabled"]:
                            btn_disable = InlineKeyboardButton(
                                text="üî¥ –í–´–ö–õ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã",
                                callback_data="disable_custom_commands"
                            )
                            rows.append([btn_disable])
                        else:
                            btn_enable = InlineKeyboardButton(
                                text="üü¢ –í–ö–õ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã",
                                callback_data="enable_custom_commands"
                            )
                            rows.append([btn_enable])

                        if config["auto_deliveries_enabled"]:
                            btn_disable = InlineKeyboardButton(
                                text="üî¥ –í–´–ö–õ –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                                callback_data="disable_auto_delivery"
                            )
                            rows.append([btn_disable])
                        else:
                            btn_enable = InlineKeyboardButton(
                                text="üü¢ –í–ö–õ –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É",
                                callback_data="enable_auto_delivery"
                            )
                            rows.append([btn_enable])

                        btn_refresh = InlineKeyboardButton(
                            text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="other"
                            ).pack()
                        )
                        rows.append([btn_refresh])
                        btn_back = InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                            callback_data=CallbackDatas.BotSettingsNavigation(
                                to="default"
                            ).pack()
                        )
                        rows.append([btn_back])
                        markup = InlineKeyboardMarkup(inline_keyboard=rows)
                        return markup
                    
        class LotsSettings:
            class Error:
                def text() -> str:
                    msg = f"üì∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤</b>" \
                          f"\n" \
                          f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                          f"\n" \
                          f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üì∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤</b>" \
                          f"\n" \
                          f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                          f"\n" \
                          f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text() -> str:
                    profile = funpaybot.funpay_account.get_user(funpaybot.funpay_account.id)
                    active_lots = profile.get_lots()
                    msg = f"üì∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–æ–≤</b>" \
                          f"\n" \
                          f"\n‚Üí –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã: <code>{len(active_lots)}</code>" \
                          f"\n" \
                          f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg
                
                def kb() -> InlineKeyboardMarkup:
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.LotsSettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="settings"
                        ).pack()
                    )
                    rows = [[btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
    class Modules:
        class Pagination:
            def text() -> str:
                modules = ModulesManager.get_modules()
                msg = f"üîå <b>–ú–æ–¥—É–ª–∏</b>" \
                        f"\n–í—Å–µ–≥–æ <b>{len(modules)}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π" \
                        f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üì"
                return msg
            
            def kb(page: int = 0) -> InlineKeyboardMarkup:
                modules = ModulesManager.get_modules()

                rows = []
                items_per_page = 7
                total_pages = math.ceil(len(modules)/items_per_page)
                total_pages = total_pages if total_pages > 0 else 1

                if page < 0:
                    page = 0
                elif page >= total_pages:
                    page = total_pages-1

                start_offset = page * items_per_page
                end_offset = start_offset + items_per_page

                for module in list(modules)[start_offset:end_offset]:
                    btn = InlineKeyboardButton(
                        text=module.meta.name,
                        callback_data=CallbackDatas.ModulePage(
                            uuid=module.uuid
                        ).pack()
                    )
                    rows.append([btn])
                    
                buttons_row = []
                if page > 0:
                    btn_back = InlineKeyboardButton(
                        text="‚Üê",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page-1
                        ).pack()
                    )
                else:
                    btn_back = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                buttons_row.append(btn_back)
                    
                btn_pages = InlineKeyboardButton(
                    text=f"{page+1}/{total_pages}",
                    callback_data="enter_modules_page"
                )
                buttons_row.append(btn_pages)
                
                if page < total_pages-1:
                    btn_next = InlineKeyboardButton(
                        text="‚Üí",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page+1
                        ).pack()
                    )
                else:
                    btn_next = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                buttons_row.append(btn_next)
                rows.append(buttons_row)

                btn2 = InlineKeyboardButton(
                    text="üö™ –í—ã—Ö–æ–¥",
                    callback_data=CallbackDatas.MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows.append([btn2])
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Page:
            class Error:
                def text() -> str:
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí UUID: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí UUID: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text(module_uuid: UUID) -> str:
                    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
                    if not module:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
                    
                    enabled = "üü¢ –í–∫–ª—é—á–µ–Ω" if module.enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
                    msg = f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–º</b>" \
                        f"\n" \
                        f"\n‚Üí –°–æ—Å—Ç–æ—è–Ω–∏–µ: <code>{enabled}</code>" \
                        f"\n" \
                        f"\n‚Üí UUID: <code>{module.uuid}</code>" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{module.meta.name}</code>" \
                        f"\n‚Üí –í–µ—Ä—Å–∏—è: <code>{module.meta.version}</code>" \
                        f"\n‚Üí –û–ø–∏—Å–∞–Ω–∏–µ: <blockquote>{module.meta.description}</blockquote>" \
                        f"\n" \
                        f"\n‚Üí –ê–≤—Ç–æ—Ä—ã: <code>{module.meta.authors}</code>" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∏: <code>{module.meta.links}</code>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg
                
                def kb(module_uuid: UUID, page: int) -> InlineKeyboardMarkup:
                    module: Module = ModulesManager.get_module_by_uuid(module_uuid)
                    if not module:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å")
                    
                    rows = []
                    if module.enabled:
                        btn_disable = InlineKeyboardButton(
                            text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å",
                            callback_data="disable_module"
                        )
                        rows.append([btn_disable])
                    else:
                        btn_enable = InlineKeyboardButton(
                            text="üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å",
                            callback_data="enable_module"
                        )
                        rows.append([btn_enable])
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.ModulePage(
                            uuid=module_uuid
                        ).pack()
                    )
                    rows.append([btn_refresh])
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.ModulesPagination(
                            page=page
                        ).pack()
                    )
                    rows.append([btn_back])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
    class ActiveOrders:
        class Pagination:
            class Error:
                def text() -> str:
                    msg = f"üõí <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>" \
                            f"\n–í—Å–µ–≥–æ <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i> –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                    return msg
                
                def kb(page: int = 0) -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="...",
                        callback_data="123"
                    )
                    btn2 = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                    btn3 = InlineKeyboardButton(
                        text="?/?",
                        callback_data="123"
                    )
                    btn4 = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                    btn5 = InlineKeyboardButton(
                        text="üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤",
                        callback_data="confirm_creating_ticket_to_orders"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.ActiveOrdersPagination(
                            page=page
                        ).pack()
                    )
                    btn_exit = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1], [btn2, btn3, btn4], [btn5], [btn_refresh], [btn_exit]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup

            class Loading:
                def text(loaded: int = 0, count: int | str = 0) -> str:
                    msg = f"üõí <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>" \
                            f"\n–ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã: <b>{loaded}</b>/<b>{count}</b>" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                    return msg
                
                def kb(page: int = 0) -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="...",
                        callback_data="123"
                    )
                    btn2 = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                    btn3 = InlineKeyboardButton(
                        text="?/?",
                        callback_data="123"
                    )
                    btn4 = InlineKeyboardButton(
                        text="üõë",
                        callback_data="123"
                    )
                    btn5 = InlineKeyboardButton(
                        text="üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤",
                        callback_data="confirm_creating_ticket_to_orders"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.ActiveOrdersPagination(
                            page=page
                        ).pack()
                    )
                    btn_exit = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn1], [btn2, btn3, btn4], [btn5], [btn_refresh], [btn_exit]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
            
            class Default:
                def text(active_orders: list[fpapi_types.OrderShortcut]) -> str:
                    msg = f"üõí <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>" \
                            f"\n–í—Å–µ–≥–æ <b>{len(active_orders)}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤" \
                            f"\n\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                    return msg
            
                def kb(page: int = 0, active_orders: list[fpapi_types.OrderShortcut] = None) -> InlineKeyboardMarkup:
                    rows = []
                    items_per_page = 12
                    items_per_row = 2
                    total_pages = math.ceil(len(active_orders)/items_per_page)
                    total_pages = total_pages if total_pages > 0 else 1

                    if page < 0:
                        page = 0
                    elif page >= total_pages:
                        page = total_pages-1

                    start_offset = page * items_per_page
                    end_offset = start_offset + items_per_page

                    prev_btn = None
                    for i in range(len(active_orders[start_offset:end_offset])):
                        order = active_orders[i+start_offset]
                        btn = InlineKeyboardButton(
                            text=f"#{order.id} ({order.buyer_username})",
                            callback_data=CallbackDatas.ActiveOrderPage(
                                order_id=order.id
                            ).pack()
                        )
                        if i > 0 and i % items_per_row == 0:
                            rows.append([prev_btn, btn])
                        elif page == total_pages and i == len(active_orders[start_offset:end_offset])-1:
                            rows.append([btn])
                        prev_btn = btn
                        
                    buttons_row = []
                    if page > 0:
                        btn_back = InlineKeyboardButton(
                            text="‚Üê",
                            callback_data=CallbackDatas.ActiveOrdersPagination(
                                page=page-1
                            ).pack()
                        )
                    else:
                        btn_back = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_back)

                        
                    btn_pages = InlineKeyboardButton(
                        text=f"{page+1}/{total_pages}",
                        callback_data="enter_active_orders_page"
                    )
                    buttons_row.append(btn_pages)
                    
                    if page < total_pages-1:
                        btn_next = InlineKeyboardButton(
                            text="‚Üí",
                            callback_data=CallbackDatas.ActiveOrdersPagination(
                                page=page+1
                            ).pack()
                        )
                    else:
                        btn_next = InlineKeyboardButton(
                            text="üõë",
                            callback_data="123"
                        )
                    buttons_row.append(btn_next)
                    rows.append(buttons_row)

                    btn_create_ticket = InlineKeyboardButton(
                        text="üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤",
                        callback_data="confirm_creating_tickets_to_orders"
                    )
                    rows.append([btn_create_ticket])
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="refresh_active_orders_pagination"
                    )
                    rows.append([btn_refresh])
                    btn_exit = InlineKeyboardButton(
                        text="üö™ –í—ã—Ö–æ–¥",
                        callback_data=CallbackDatas.MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows.append([btn_exit])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
        class EnterActiveOrderPage:
            def text() -> str:
                msg = f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì" 
                return msg
            
        class ConfirmCreatingTicketsToOrders:
            def text(active_orders_count) -> str:
                msg = f"‚ûïüìû <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>" \
                        f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞—Å—Ç –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É FunPay –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ <code>{active_orders_count}</code> –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤" \
                        f"\n\n–í—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ <b>{math.ceil(active_orders_count/5)}</b> —Ç–∏–∫–µ—Ç–æ–≤ <i>(–ø–æ 5 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 1 —Ç–∏–∫–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)</i>"
                return msg

            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data="create_tickets_to_orders"
                )
                btn2 = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="destroy"
                )
                rows = [[btn1, btn2]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class CreatingTicketsToOrders:
            def text(active_orders_count, created) -> str:
                msg = f"üïê –°–æ–∑–¥–∞—é —Ç–∏–∫–µ—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤..." \
                      f"\n–ü—Ä–æ—Ü–µ—Å—Å: <b>{created}</b>/<b>{active_orders_count}</b>"
                return msg
            
        class TicketsToOrdersCreated:
            def text(active_orders_count, created_count) -> str:
                msg = f"‚úÖ –¢–∏–∫–µ—Ç—ã –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è <b>{created_count}</b>/<b>{active_orders_count}</b> –∑–∞–∫–∞–∑–æ–≤ <b>–±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã</b> ‚Üì" \
                      f"\nhttps://support.funpay.com/tickets"
                return msg
        
        class Page:
            class Error:
                def text() -> str:
                    msg = f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>" \
                        f"\n" \
                        f"\n‚Üí ID –∑–∞–∫–∞–∑–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n‚Üí –°—É–º–º–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>" \
                        f"\n" \
                        f"\n‚Üí ID –∑–∞–∫–∞–∑–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n‚Üí –°—É–º–º–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text(order: fpapi_types.Order) -> str:
                    msg = f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>" \
                        f"\n" \
                        f"\n‚Üí ID –∑–∞–∫–∞–∑–∞: <code>{order.id}</code>" \
                        f"\n‚Üí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{order.buyer_username}</code>" \
                        f"\n‚Üí –°—É–º–º–∞: <code>{order.sum}</code> —Ä." \
                        f"\n" \
                        f"\n‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ: <blockquote>{order.title}</blockquote>" \
                        f"\n" \
                        f"\n‚Üí –°—Å—ã–ª–∫–∞: <b>https://funpay.com/orders/{order.id}/</b>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üì"
                    return msg
                
                def kb(page: int = 0, order_id: str = "") -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="üìû –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                        callback_data="confirm_creating_ticket_to_order"
                    )
                    btn2 = InlineKeyboardButton(
                        text="üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ",
                        url=f"https://funpay.com/orders/{order_id}/"
                    )
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.ActiveOrderPage(
                            order_id=order_id
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.ActiveOrdersPagination(
                            page=page
                        ).pack()
                    )
                    rows = [[btn1, btn2], [btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class ConfirmCreatingTicketToOrder:
                def text(order_id) -> str:
                    msg = f"‚ûïüìû <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>" \
                            f"\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞—Å—Ç –∑–∞—è–≤–∫—É –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É FunPay –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ <code>#{order_id}</code>"
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    btn1 = InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data="create_ticket_to_order"
                    )
                    btn2 = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="destroy"
                    )
                    rows = [[btn1, btn2]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class CreatingTicketToOrders:
                def text(order_id) -> str:
                    msg = f"üïê –°–æ–∑–¥–∞—é —Ç–∏–∫–µ—Ç –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ <code>#{order_id}</code>"
                    return msg
                
            class TicketToOrderCreated:
                def text(order_id, ticket_link) -> str:
                    msg = f"‚úÖ –¢–∏–∫–µ—Ç –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ <code>#{order_id}</code> <b>–±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>" \
                          f"\n‚Üí {ticket_link}"
                    return msg

class Callbacks:
    class CallSeller:
        def text(calling_name, chat_link) -> str:
            msg = f"üÜò <b>{calling_name}</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –ø–æ–º–æ—â—å!" \
                  f"\n{chat_link}"
            return msg