import asyncio
from colorama import Fore
import textwrap

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.exceptions import TelegramUnauthorizedError

from . import router as main_router
from . import templates as templ

from core.console import restart
import settings
from settings import Settings as sett
import logging
logger = logging.getLogger("universal.telegram")

from core.modules_manager import ModulesManager as modules_m
from core.handlers_manager import HandlersManager as handlers_m
from . import set_telegram_bot, set_telegram_bot_loop
from __init__ import ACCENT_COLOR

PREFIX = f"{Fore.LIGHTCYAN_EX}[TG]{Fore.WHITE}"

class TelegramBot:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π Telegram –±–æ—Ç–∞
    """

    def __init__(self, bot_token: str):
        self.config = sett.get("config")
        self.bot_token = bot_token

        logging.getLogger("aiogram").setLevel(logging.CRITICAL)
        logging.getLogger("aiogram.event").setLevel(logging.CRITICAL)

        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher()
        
        for module in modules_m.get_modules():
            for router in module.telegram_bot_routers:
                main_router.include_router(router)
        self.dp.include_router(main_router)
        
        set_telegram_bot_loop(asyncio.get_running_loop())
        set_telegram_bot(self)

    async def set_main_menu(self):
        main_menu_commands = [BotCommand(command="/start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        await self.bot.set_my_commands(main_menu_commands)

    async def set_short_description(self):
        short_description = textwrap.dedent(f"""
            FunPay Universal ‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è FunPay üü¶
            ‚îï –ö–∞–Ω–∞–ª ‚Äî @alexeyproduction
            ‚îï –ë–æ—Ç ‚Äî @alexey_production_bot
        """)
        await self.bot.set_my_short_description(short_description=short_description)

    async def run_bot(self):
        try:
            await self.set_main_menu()
            await self.set_short_description()
        except TelegramUnauthorizedError:
            logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É Telegram –±–æ—Ç—É. {Fore.WHITE}–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
            print(f"{Fore.WHITE}ü§ñ  –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π {Fore.LIGHTCYAN_EX}—Ç–æ–∫–µ–Ω –±–æ—Ç–∞{Fore.WHITE}? +/-")
            a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
            if a == "+":
                param = {"telegram": {"api": {"token": settings.DATA["config"]["params"]["telegram"]["api"]["token"]}}}
                sett.configure("config", ACCENT_COLOR, params=param)
                restart()
            else:
                logger.info(f"{PREFIX} –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –±–æ—Ç—É...")
                restart()
        
        bot_event_handlers = handlers_m.get_bot_event_handlers()
        async def handle_on_telegram_bot_init():
            """ 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞. 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ON_TELEGRAM_BOT_INIT.
            """
            if "ON_TELEGRAM_BOT_INIT" in bot_event_handlers:
                for handler in bot_event_handlers["ON_TELEGRAM_BOT_INIT"]:
                    try:
                        await handler(self)
                    except Exception as e:
                        logger.error(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –≤ –∏–≤–µ–Ω—Ç–∞ ON_TELEGRAM_BOT_INIT: {Fore.WHITE}{e}")
        await handle_on_telegram_bot_init()
        
        me = await self.bot.get_me()
        logger.info(f"{PREFIX} Telegram –±–æ—Ç {Fore.LIGHTWHITE_EX}@{me.username} {Fore.WHITE}–∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω")
        await self.dp.start_polling(self.bot, skip_updates=True, handle_signals=False)
        
    async def call_seller(self, calling_name: str, chat_id: int | str):
        """
        –ü–∏—à–µ—Ç –∞–¥–º–∏–Ω—É –≤ Telegram —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–º–æ—â–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.
                
        :param calling_name: –ù–∏–∫–Ω–µ–π–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
        :type calling_name: `str`

        :param chat_id: ID —á–∞—Ç–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.
        :type chat_id: `int` or `str`
        """
        config = sett.get("config")
        for user_id in config["telegram"]["bot"]["signed_users"]:
            await self.bot.send_message(chat_id=user_id, 
                                        text=templ.call_seller_text(calling_name, f"https://funpay.com/chat/?node={chat_id}"),
                                        kb=templ.destroy_kb(),
                                        parse_mode="HTML")
            
    async def log_event(self, text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —á–∞—Ç TG –±–æ—Ç–∞.
                
        :param text: –¢–µ–∫—Å—Ç –ª–æ–≥–∞.
        :type text: `str`
        """
        config = sett.get("config")
        chat_id = config["funpay"]["bot"]["tg_logging_chat_id"]
        if not chat_id:
            for user_id in config["telegram"]["bot"]["signed_users"]:
                await self.bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")
        else:
            await self.bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")

if __name__ == "__main__":
    config = sett.get("config")
    asyncio.run(TelegramBot(config["telegram"]["api"]["token"]).run_bot())