from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

from settings import Settings as sett

from .navigation import *
from .. import templates as templ
from .. import callback_datas as calls
from .. import states as states
from ..helpful import throw_float_message


router = Router()


@router.callback_query(F.data == "destroy")
async def callback_back(callback: CallbackQuery):
    await callback.message.delete()


# --- –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∞—Å—Å–∞–º–∏ CallbackData  ---

@router.callback_query(calls.RememberChatName.filter())
async def callback_remember_chat_name(callback: CallbackQuery, callback_data: calls.RememberChatName, state: FSMContext):
    await state.set_state(None)
    chat_name = callback_data.name
    do = callback_data.do
    await state.update_data(chat_name=chat_name)
    if do == "send_mess":
        await state.set_state(states.ActionsStates.waiting_for_message_text)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.do_action_text(
                "üí¨ –í–≤–µ–¥–∏—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>{chat_name}</b> ‚Üì"
            ), 
            reply_markup=templ.destroy_kb(),
            callback=callback,
            send=True
        )

@router.callback_query(calls.RememberOrderId.filter())
async def callback_remember_order_id(callback: CallbackQuery, callback_data: calls.RememberOrderId, state: FSMContext):
    await state.set_state(None)
    order_id = callback_data.or_id
    do = callback_data.do
    await state.update_data(order_id=order_id)
    if do == "refund":
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.do_action_text(
                "üì¶‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>–≤–æ–∑–≤—Ä–∞—Ç</b> –∑–∞–∫–∞–∑–∞ <b>#{order_id}</b> ‚Üì"
            ), 
            reply_markup=templ.confirm_kb(confirm_cb="refund_order", cancel_cb="destroy"),
            callback=callback,
            send=True
        )
    elif do == "answer_rev":
        await state.set_state(states.ActionsStates.waiting_for_review_answer_text)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.do_action_text(
                "üí¨üåü –í–≤–µ–¥–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç</b> –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É <b>#{order_id}</b> ‚Üì"
            ), 
            reply_markup=templ.destroy_kb(),
            callback=callback,
            send=True
        )


# --- –î–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∞—Å—Å–æ–º FunPayBot  ---

@router.callback_query(F.data == "refund_order")
async def callback_refund_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    from fpbot.funpaybot import get_funpay_bot
    data = await state.get_data()
    order_id = data.get("order_id")
    get_funpay_bot().funpay_account.refund(order_id)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.do_action_text(
            "‚úÖ –ü–æ –∑–∞–∫–∞–∑—É <code>#{order_id}</code> –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç"
        ), 
        reply_markup=templ.destroy_kb()
    )


@router.callback_query(F.data == "create_tickets")
async def callback_create_tickets(callback: CallbackQuery, state: FSMContext):
    try:
        from fpbot.funpaybot import get_funpay_bot
        await state.set_state(None)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.events_float_text(
                "üìû –ò–¥—ë—Ç <b>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤</b>, –æ–∂–∏–¥–∞–π—Ç–µ (—Å–º. –∫–æ–Ω—Å–æ–ª—å)..."
            ),
            reply_markup=templ.back_kb(calls.MenuNavigation(to="events").pack())
        )
        get_funpay_bot().create_tickets()
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.events_float_text(
                "üìû‚úÖ <b>–¢–∏–∫–µ—Ç—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤</b> –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã"
            ), 
            reply_markup=templ.back_kb(calls.MenuNavigation(to="events").pack())
        )
    except Exception as e:
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.events_float_text(e), 
            reply_markup=templ.back_kb(calls.MenuNavigation(to="events").pack())
        )


# --- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ  ---

@router.callback_query(F.data.regexp(r"^clean_.*\|.*"))
async def callback_switch(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    to = callback.data.split("|")[0].split("_")[1]
    params = callback.data.split("|")[1:]

    field_to_toggle = params[-1]
    config_path = params[:-1]
    current_level = config["funpay"]
    for key in config_path[:-1]:
        current_level = current_level[key]

    last_key = config_path[-1]
    if isinstance(current_level[last_key][field_to_toggle], str): clean_value = ""
    elif isinstance(current_level[last_key][field_to_toggle], int): clean_value = 0
    elif isinstance(current_level[last_key][field_to_toggle], list): clean_value = []
    elif isinstance(current_level[last_key][field_to_toggle], dict): clean_value = {}
    current_level[last_key][field_to_toggle] = clean_value
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to=to), state)


# --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ ---

@router.callback_query(F.data.regexp(r"^switch_.*\|.*"))
async def callback_switch(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    to = callback.data.split("|")[0].split("_")[1]
    params = callback.data.split("|")[1:]

    field_to_toggle = params[-1]
    config_path = params[:-1]
    current_level = config["funpay"]
    for key in config_path[:-1]:
        current_level = current_level[key]

    last_key = config_path[-1]
    current_level[last_key][field_to_toggle] = not current_level[last_key][field_to_toggle]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to=to), state)


@router.callback_query(F.data == "switch_message_enabled")
async def callback_switch_message_enabled(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        message_id = data.get("message_id")
        if not message_id:
            raise Exception("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        messages = sett.get("messages")
        messages[message_id]["enabled"] = not messages[message_id]["enabled"]
        sett.set("messages", messages)
        return await callback_message_page(callback, calls.MessagePage(message_id=message_id), state)
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_mess_float_text(e), 
            reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "switch_module_enabled")
async def callback_switch_module_enabled(callback: CallbackQuery, state: FSMContext):
    from core.modules import get_module_by_uuid, disable_module, enable_module
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        module_uuid = data.get("module_uuid")

        module = get_module_by_uuid(module_uuid)
        await disable_module(module_uuid) if module.enabled else await enable_module(module_uuid)
        
        return await callback_module_page(callback, calls.ModulePage(uuid=module_uuid), state)
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.module_page_float_text(e), 
            reply_markup=templ.back_kb(calls.ModulesPagination(page=last_page).pack())
        )


# --- –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π ---

@router.callback_query(F.data == "enter_golden_key")
async def callback_enter_golden_key(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_golden_key)
    config = sett.get("config")
    golden_key = config["funpay"]["api"]["golden_key"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_auth_float_text(
            "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>golden_key</b> –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{golden_key}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="auth").pack())
    )


@router.callback_query(F.data == "enter_user_agent")
async def callback_enter_user_agent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_user_agent)
    config = sett.get("config")
    user_agent = config["funpay"]["api"]["user_agent"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_auth_float_text(
            "üé© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>user_agent</b> –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{user_agent}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="auth").pack())
    )


@router.callback_query(F.data == "enter_proxy")
async def callback_enter_proxy(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_proxy)
    config = sett.get("config")
    proxy = config["funpay"]["api"]["proxy"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_conn_float_text(
            "üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä</b> (—Ñ–æ—Ä–º–∞—Ç: user:pass@ip:port –∏–ª–∏ ip:port) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{proxy}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack())
    )


@router.callback_query(F.data == "enter_funpayapi_requests_timeout")
async def callback_enter_funpayapi_requests_timeout(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_requests_timeout)
    config = sett.get("config")
    requests_timeout = config["funpay"]["api"]["requests_timeout"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_conn_float_text(
            "üõú –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{requests_timeout}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack())
    )


@router.callback_query(F.data == "enter_funpayapi_runner_requests_delay")
async def callback_enter_funpayapi_runner_requests_delay(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_runner_requests_delay)
    config = sett.get("config")
    requests_delay = config["funpay"]["api"]["runner_requests_delay"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_conn_float_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{requests_delay}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack())
    )


@router.callback_query(F.data == "enter_watermark_value")
async def callback_enter_watermark_value(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_watermark_value)
    config = sett.get("config")
    watermark_value = config["funpay"]["watermark"]["value"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_other_float_text(
            "‚úçÔ∏è¬©Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫</b> –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{watermark_value}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="other").pack())
    )


@router.callback_query(F.data == "enter_custom_commands_page")
async def callback_enter_custom_commands_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page", 0)
    await state.set_state(states.CustomCommandsStates.waiting_for_page)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_comms_float_text(
            "üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"
        ), 
        reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
    )


@router.callback_query(F.data == "enter_new_custom_command")
async def callback_enter_new_custom_command(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page", 0)
    await state.set_state(states.CustomCommandsStates.waiting_for_new_custom_command)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_new_comm_float_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>!—Ç–µ—Å—Ç</code>) ‚Üì"
        ), 
        reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
    )


@router.callback_query(F.data == "enter_custom_command_answer")
async def callback_enter_custom_command_answer(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        custom_commands = sett.get("custom_commands")
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.CustomCommandsStates.waiting_for_custom_command_answer)
        custom_command_answer = "\n".join(custom_commands[custom_command]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(
                f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</b> –∫–æ–º–∞–Ω–¥—ã <code>{custom_command}</code> ‚Üì"
                f"\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{custom_command_answer}</blockquote>"
            ), 
            reply_markup=templ.back_kb(calls.CustomCommandPage(command=custom_command).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(e), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "enter_auto_deliveries_page")
async def callback_enter_auto_deliveries_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page", 0)
    await state.set_state(states.AutoDeliveriesStates.waiting_for_page)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_deliv_float_text(
            "üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"
        ), 
        reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
    )


@router.callback_query(F.data == "enter_new_auto_delivery_lot_id")
async def callback_enter_new_auto_delivery_lot_id(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page", 0)
    await state.set_state(states.AutoDeliveriesStates.waiting_for_new_auto_delivery_lot_id)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_new_deliv_float_text(
            "üÜî –í–≤–µ–¥–∏—Ç–µ <b>ID –ª–æ—Ç–∞</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É ‚Üì"
        ), 
        reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
    )


@router.callback_query(F.data == "enter_auto_delivery_message")
async def callback_enter_auto_delivery_message(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_deliveries = sett.get("auto_deliveries")
        auto_delivery_lot_id = data.get("auto_delivery_lot_id")
        if not auto_delivery_lot_id:
            raise Exception("‚ùå ID –ª–æ—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.AutoDeliveriesStates.waiting_for_auto_delivery_message)
        auto_delivery_message = "\n".join(auto_deliveries[str(auto_delivery_lot_id)]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(
                f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏</b> –ª–æ—Ç–∞ <code>{auto_delivery_lot_id}</code>"
                f"\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{auto_delivery_message}</blockquote>"
            ), 
            reply_markup=templ.back_kb(calls.AutoDeliveryPage(lot_id=auto_delivery_lot_id).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(e), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "enter_messages_page")
async def callback_enter_messages_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page", 0)
    await state.set_state(states.MessagesStates.waiting_for_page)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_mess_float_text(
            "üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"
        ), 
        reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack())
    )


@router.callback_query(F.data == "enter_message_text")
async def callback_enter_message_text(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        message_id = data.get("message_id")
        if not message_id:
            raise Exception("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.MessagesStates.waiting_for_message_text)
        messages = sett.get("messages")
        mess_text = "\n".join(messages[message_id]["text"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_mess_float_text(
                f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b> <code>{message_id}</code> ‚Üì"
                f"\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{mess_text}</blockquote>"
            ), 
            reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_mess_float_text(e), 
            reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "enter_tg_logging_chat_id")
async def callback_enter_tg_logging_chat_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_tg_logging_chat_id)
    config = sett.get("config")
    tg_logging_chat_id = config["funpay"]["tg_logging"]["chat_id"] or "‚úîÔ∏è –í–∞—à —á–∞—Ç —Å –±–æ—Ç–æ–º"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_logger_float_text(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤</b> (–≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π ID, —Ç–∞–∫ –∏ —é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{tg_logging_chat_id}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="logger").pack())
    )


@router.callback_query(F.data == "enter_auto_tickets_orders_per_ticket")
async def callback_enter_auto_tickets_orders_per_ticket(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_auto_tickets_orders_per_ticket)
    config = sett.get("config")
    auto_tickets_orders_per_ticket = config["funpay"]["bot"]["auto_tickets_orders_per_ticket"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_tickets_float_text(
            "üìã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–¥–Ω–æ–º —Ç–∏–∫–µ—Ç–µ</b> ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{auto_tickets_orders_per_ticket}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="tickets").pack())
    )


@router.callback_query(F.data == "enter_auto_tickets_min_order_age")
async def callback_enter_auto_tickets_min_order_age(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_auto_tickets_min_order_age)
    config = sett.get("config")
    auto_tickets_min_order_age = config["funpay"]["auto_tickets"]["min_order_age"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_tickets_float_text(
            "üë¥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–∫–∞–∑–æ–≤</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{auto_tickets_min_order_age}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="tickets").pack())
    )


@router.callback_query(F.data == "enter_auto_tickets_create_interval")
async def callback_enter_enter_auto_tickets_create_interval(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.waiting_for_auto_tickets_create_interval)
    config = sett.get("config")
    auto_tickets_create_interval = config["funpay"]["bot"]["auto_tickets_create_interval"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.settings_tickets_float_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì"
            f"\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{auto_tickets_create_interval}</code>"
        ), 
        reply_markup=templ.back_kb(calls.SettingsNavigation(to="tickets").pack())
    )


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥  ---

@router.callback_query(F.data == "add_new_custom_command")
async def callback_add_new_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        custom_commands = sett.get("custom_commands")
        new_custom_command = data.get("new_custom_command")
        new_custom_command_answer = data.get("new_custom_command_answer")
        if not new_custom_command:
            raise Exception("‚ùå –ù–æ–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        if not new_custom_command_answer:
            raise Exception("‚ùå –û—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")

        custom_commands[new_custom_command] = new_custom_command_answer.splitlines()
        sett.set("custom_commands", custom_commands)
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_new_comm_float_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞</b> <code>{new_custom_command}</code> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            ), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_new_comm_float_text(e), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "add_new_auto_delivery")
async def callback_add_new_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(None)
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        auto_deliveries = sett.get("auto_deliveries")
        new_auto_delivery_lot_id = data.get("new_auto_delivery_lot_id")
        new_auto_delivery_message = data.get("new_auto_delivery_message")
        if not new_auto_delivery_lot_id:
            raise Exception("‚ùå ID –ª–æ—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        if not new_auto_delivery_message:
            raise Exception("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        auto_deliveries[str(new_auto_delivery_lot_id)] = new_auto_delivery_message.splitlines()
        sett.set("auto_deliveries", auto_deliveries)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_new_deliv_float_text(
                f"‚úÖ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b> –Ω–∞ –ª–æ—Ç <code>{new_auto_delivery_lot_id}</code> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
            ), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_new_deliv_float_text(e), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è  ---

@router.callback_query(F.data == "confirm_deleting_custom_command")
async def callback_confirm_deleting_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(
                f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b> <code>{custom_command}</code>"
            ), 
            reply_markup=templ.confirm_kb(confirm_cb="delete_custom_command", cancel_cb=calls.CustomCommandPage(command=custom_command).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(e), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "confirm_creating_tickets")
async def callback_confirm_creating_tickets(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await throw_float_message(
        state=state, 
        message=callback.message, 
        text=templ.events_float_text(
            "üìû‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤</b> ‚Üì"
        ), 
        reply_markup=templ.confirm_kb(confirm_cb="create_tickets", cancel_cb=calls.MenuNavigation(to="events").pack())
    )


@router.callback_query(F.data == "confirm_deleting_auto_delivery")
async def callback_confirm_deleting_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_delivery_lot_id = data.get("auto_delivery_lot_id")
        if not auto_delivery_lot_id:
            raise Exception("‚ùå ID –ª–æ—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(
                f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b> –Ω–∞ –ª–æ—Ç <code>{auto_delivery_lot_id}</code>"
            ), 
            reply_markup=templ.confirm_kb(confirm_cb="delete_auto_delivery", cancel_cb=calls.AutoDeliveryPage(lot_id=auto_delivery_lot_id).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(e), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )


# --- –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞  ---

@router.callback_query(F.data == "delete_custom_command")
async def callback_delete_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        custom_commands = sett.get("custom_commands")
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        del custom_commands[custom_command]
        sett.set("custom_commands", custom_commands)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞</b> <code>{custom_command}</code> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
            ), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_comm_page_float_text(e), 
            reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack())
        )


@router.callback_query(F.data == "delete_auto_delivery")
async def callback_delete_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        auto_deliveries = sett.get("auto_deliveries")
        auto_delivery_lot_id = data.get("auto_delivery_lot_id")
        if not auto_delivery_lot_id:
            raise Exception("‚ùå ID –ª–æ—Ç–∞ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        del auto_deliveries[str(auto_delivery_lot_id)]
        sett.set("auto_deliveries", auto_deliveries)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(
                f"‚úÖ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b> –Ω–∞ –ª–æ—Ç <code>{auto_delivery_lot_id}</code> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
            ), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.settings_deliv_page_float_text(e), 
            reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack())
        )


# --- –†–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---

@router.callback_query(F.data == "reload_module")
async def callback_reload_module(callback: CallbackQuery, state: FSMContext):
    from core.modules import reload_module
    try:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        module_uuid = data.get("module_uuid")
        
        await reload_module(module_uuid)
        return await callback_module_page(callback, calls.ModulePage(uuid=module_uuid), state)
    except Exception as e:
        data = await state.get_data()
        last_page = data.get("last_page", 0)
        await throw_float_message(
            state=state, 
            message=callback.message, 
            text=templ.module_page_float_text(e), 
            reply_markup=templ.back_kb(calls.ModulesPagination(page=last_page).pack())
        )