import os
import sys
import importlib
import uuid
from uuid import UUID
from colorama import Fore, Style

from core.handlers_manager import remove_handlers, register_bot_event_handlers, register_funpay_event_handlers

class ModuleMeta:
    """
    –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è.

    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –º–æ–¥—É–ª—è.
    :type prefix: str

    :param version: –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è.
    :type version: str

    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è.
    :type name: str

    :param description: –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è.
    :type description: str

    :param authors: –ê–≤—Ç–æ—Ä—ã –º–æ–¥—É–ª—è.
    :type authors: str

    :param links: –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤ –º–æ–¥—É–ª—è.
    :type links: str
    """
    def __init__(self, prefix: str, version: str, name: str,
                 description: str, authors: str, links: str):
        self.prefix = prefix
        """ –ü—Ä–µ—Ñ–∏–∫—Å –º–æ–¥—É–ª—è. """
        self.version = version
        """ –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è. """
        self.name = name
        """ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è. """
        self.description = description
        """ –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è. """
        self.authors = authors
        """ –ê–≤—Ç–æ—Ä—ã –º–æ–¥—É–ª—è. """
        self.links = links
        """ –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤ –º–æ–¥—É–ª—è. """

class Module:
    """ –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è """
    def __init__(self, enabled: bool, meta: ModuleMeta, bot_event_handlers: dict, 
                 funpay_event_handlers: dict, telegram_bot_routers: list):
        self.uuid: UUID = uuid.uuid4()
        """ UUID –º–æ–¥—É–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏). """
        self.enabled: bool = enabled
        """ –í–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å. """
        self.meta = meta
        """ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è. """
        self.bot_event_handlers = bot_event_handlers
        """ –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞. """
        self.funpay_event_handlers = funpay_event_handlers
        """ –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ FunPay. """
        self.telegram_bot_routers = telegram_bot_routers
        """ –†–æ—É—Ç–µ—Ä—ã Telegram –±–æ—Ç–∞. """


_loaded_modules: list[Module] = []
""" –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ """

def set_modules(modules: list[Module]):
    """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ """
    global _loaded_modules
    _loaded_modules = modules

def get_modules() -> list[Module]:
    """ –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ """
    return _loaded_modules

def get_module_by_uuid(module_uuid: UUID) -> Module:
    """ 
    –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    
    :param module_uuid: UUID –º–æ–¥—É–ª—è.
    :type module_uuid: UUID

    :return: –û–±—ä–µ–∫—Ç –º–æ–¥—É–ª—è.
    :rtype: Module
    """
    for module in _loaded_modules:
        if module.uuid == module_uuid:
            return module
    return None

def enable_module(module_uuid: UUID) -> bool:
    """
    –í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã.

    :param module_uuid: UUID –º–æ–¥—É–ª—è.
    :type module_uuid: UUID
    """
    global _loaded_modules
    try:
        module = get_module_by_uuid(module_uuid)
        if not module:
            raise Exception("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö")
    
        register_bot_event_handlers(module.bot_event_handlers)
        register_funpay_event_handlers(module.funpay_event_handlers)
        i = _loaded_modules.index(module)
        module.enabled = True
        _loaded_modules[i] = module
        print(f"{Fore.WHITE}üîå –ú–æ–¥—É–ª—å {Fore.LIGHTWHITE_EX}{module.meta.name} {Fore.WHITE}–ø–æ–¥–∫–ª—é—á–µ–Ω")
        return True
    except Exception as e:
        print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_uuid}: {Fore.WHITE}{e}")
        return False

def disable_module(module_uuid: UUID) -> bool:
    """ 
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã.
    
    :param module_uuid: UUID –º–æ–¥—É–ª—è.
    :type module_uuid: UUID
    """
    global _loaded_modules
    try:
        module = get_module_by_uuid(module_uuid)
        if not module:
            raise Exception("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö")
        
        remove_handlers(module.bot_event_handlers, module.funpay_event_handlers)
        i = _loaded_modules.index(module)
        module.enabled = False
        _loaded_modules[i] = module
        print(f"{Fore.LIGHTRED_EX}üö´ –ú–æ–¥—É–ª—å {module.meta.name} –æ—Ç–∫–ª—é—á–µ–Ω")
        return True
    except Exception as e:
        print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_uuid}: {Fore.WHITE}{e}")
        return False


def load_modules() -> list[Module]:
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ modules. """
    modules = []
    modules_path = "modules"
    if modules_path not in sys.path:
        sys.path.insert(0, modules_path)

    for name in os.listdir(modules_path):
        bot_event_handlers = {}
        funpay_event_handlers = {}
        telegram_bot_routers = []
        
        full_path = os.path.join(modules_path, name)
        if os.path.isdir(full_path) and "__init__.py" in os.listdir(full_path):
            try:
                module = importlib.import_module(f"modules.{name}")
                if hasattr(module, "BOT_EVENT_HANDLERS"):
                    for key, funcs in module.BOT_EVENT_HANDLERS.items():
                        bot_event_handlers.setdefault(key, []).extend(funcs)
                if hasattr(module, "FUNPAY_EVENT_HANDLERS"):
                    for key, funcs in module.FUNPAY_EVENT_HANDLERS.items():
                        funpay_event_handlers.setdefault(key, []).extend(funcs)
                if hasattr(module, "TELEGRAM_BOT_ROUTERS"):
                    telegram_bot_routers.extend(module.TELEGRAM_BOT_ROUTERS)
                
                module_data = Module(
                    enabled=False,
                    meta=ModuleMeta(
                        module.PREFIX,
                        module.VERSION,
                        module.NAME,
                        module.DESCRIPTION,
                        module.AUTHORS,
                        module.LINKS
                    ),
                    bot_event_handlers=bot_event_handlers,
                    funpay_event_handlers=funpay_event_handlers,
                    telegram_bot_routers=telegram_bot_routers
                )
                modules.append(module_data)
            except Exception as e:
                print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {name}: {Fore.WHITE}{e}")
    return modules

def connect_modules(modules: list[Module]):
    """ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç (–≤–∫–ª—é—á–∞–µ—Ç) –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤–µ –º–æ–¥—É–ª–∏. """
    names = []
    for module in modules:
        try:
            register_bot_event_handlers(module.bot_event_handlers)
            register_funpay_event_handlers(module.funpay_event_handlers)
            i = _loaded_modules.index(module)
            module.enabled = True
            _loaded_modules[i] = module
            names.append(f"{Fore.LIGHTYELLOW_EX}{module.meta.name} {Fore.LIGHTWHITE_EX}{module.meta.version}")
        except Exception as e:
            print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module.meta.name}: {Fore.WHITE}{e}")
            continue
    print(f'{Fore.WHITE}üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {Fore.LIGHTWHITE_EX}{len(modules)} –º–æ–¥—É–ª—è(-–µ–π): {f"{Fore.WHITE}, ".join(names)}')