import os
import sys
import importlib
import pkg_resources
import uuid
from uuid import UUID
from pathlib import Path
import subprocess
from colorama import Fore, Style

from core.handlers_manager import HandlersManager

class ModuleMeta:
    """
    –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è.

    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –º–æ–¥—É–ª—è.
    :type prefix: str

    :param version: –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è.
    :type version: str

    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è.
    :type name: str

    :param description: –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è.
    :type description: str

    :param authors: –ê–≤—Ç–æ—Ä—ã –º–æ–¥—É–ª—è.
    :type authors: str

    :param links: –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤ –º–æ–¥—É–ª—è.
    :type links: str
    """
    def __init__(self, prefix: str, version: str, name: str,
                 description: str, authors: str, links: str):
        self.prefix = prefix
        """ –ü—Ä–µ—Ñ–∏–∫—Å –º–æ–¥—É–ª—è. """
        self.version = version
        """ –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è. """
        self.name = name
        """ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è. """
        self.description = description
        """ –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è. """
        self.authors = authors
        """ –ê–≤—Ç–æ—Ä—ã –º–æ–¥—É–ª—è. """
        self.links = links
        """ –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤ –º–æ–¥—É–ª—è. """

class Module:
    """
    –û–±—ä–µ–∫—Ç –º–æ–¥—É–ª—è.

    :param uuid: UUID –º–æ–¥—É–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).
    :type uuid: `UUID`

    :param enabled: –í–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å.
    :type enabled: bool

    :param meta: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è.
    :type meta: `ModuleMeta`

    :param bot_event_handlers: –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞.
    :type bot_event_handlers: dict

    :param funpay_event_handlers: –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ FunPay.
    :type funpay_event_handlers: dict

    :param telegram_bot_routers: –†–æ—É—Ç–µ—Ä—ã Telegram –±–æ—Ç–∞.
    :type telegram_bot_routers: list[`Router`]
    """
    def __init__(self, enabled: bool, meta: ModuleMeta, bot_event_handlers: dict, 
                 funpay_event_handlers: dict, telegram_bot_routers: list):
        self.uuid: UUID = uuid.uuid4()
        """ UUID –º–æ–¥—É–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏). """
        self.enabled: bool = enabled
        """ –í–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å. """
        self.meta = meta
        """ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è. """
        self.bot_event_handlers = bot_event_handlers
        """ –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞. """
        self.funpay_event_handlers = funpay_event_handlers
        """ –•–µ–Ω–¥–ª–µ—Ä—ã –∏–≤–µ–Ω—Ç–æ–≤ FunPay. """
        self.telegram_bot_routers = telegram_bot_routers
        """ –†–æ—É—Ç–µ—Ä—ã Telegram –±–æ—Ç–∞. """


_loaded_modules: list[Module] = []
""" –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏. """

class ModulesManager:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–¥—É–ª—è–º–∏ –±–æ—Ç–∞.
    """

    @staticmethod
    def set_modules(data: list[Module]):
        global _loaded_modules
        _loaded_modules = data

    @staticmethod
    def get_modules() -> list[Module]:
        global _loaded_modules
        return _loaded_modules

    @staticmethod
    def get_module_by_uuid(module_uuid: UUID) -> Module:
        """ 
        –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥—É–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        
        :param module_uuid: UUID –º–æ–¥—É–ª—è.
        :type module_uuid: UUID

        :return: –û–±—ä–µ–∫—Ç –º–æ–¥—É–ª—è.
        :rtype: Module
        """
        global _loaded_modules
        for module in _loaded_modules:
            if module.uuid == module_uuid:
                return module
        return None

    @staticmethod
    def enable_module(module_uuid: UUID) -> bool:
        """
        –í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã.

        :param module_uuid: UUID –º–æ–¥—É–ª—è.
        :type module_uuid: UUID
        """
        global _loaded_modules
        try:
            module = ModulesManager.get_module_by_uuid(module_uuid)
            if not module:
                raise Exception("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö")
        
            HandlersManager.register_bot_event_handlers(module.bot_event_handlers)
            HandlersManager.register_funpay_event_handlers(module.funpay_event_handlers)
            i = _loaded_modules.index(module)
            module.enabled = True
            _loaded_modules[i] = module
            print(f"{Fore.WHITE}üîå –ú–æ–¥—É–ª—å {Fore.LIGHTWHITE_EX}{module.meta.name} {Fore.WHITE}–ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_uuid}: {Fore.WHITE}{e}")
            return False

    @staticmethod
    def disable_module(module_uuid: UUID) -> bool:
        """ 
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã.
        
        :param module_uuid: UUID –º–æ–¥—É–ª—è.
        :type module_uuid: UUID
        """
        global _loaded_modules
        try:
            module = ModulesManager.get_module_by_uuid(module_uuid)
            if not module:
                raise Exception("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö")
            
            HandlersManager.remove_handlers(module.bot_event_handlers, module.funpay_event_handlers)
            i = _loaded_modules.index(module)
            module.enabled = False
            _loaded_modules[i] = module
            print(f"{Fore.LIGHTRED_EX}üö´ –ú–æ–¥—É–ª—å {module.meta.name} –æ—Ç–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_uuid}: {Fore.WHITE}{e}")
            return False

    @staticmethod
    def reload_module(module_name: str):
        """ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª—å (–æ—Ç–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–Ω–æ–≤–∞). """
        if module_name in sys.modules:
            del sys.modules[f"modules.{module_name}"]
        print(f"{Fore.WHITE}üîÑ  –ú–æ–¥—É–ª—å {Fore.LIGHTWHITE_EX}{module_name} {Fore.WHITE}–±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
        return importlib.import_module(module_name)

    @staticmethod
    def load_modules() -> list[Module]:
        """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ modules. """
        modules = []
        modules_path = "modules"
        if modules_path not in sys.path:
            sys.path.insert(0, modules_path)

        def is_package_installed(requirement_string: str) -> bool:
            """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –±–∏–±–ª–æ—Ç–µ–∫–∞. """
            try:
                pkg_resources.require(requirement_string)
                return True
            except (pkg_resources.DistributionNotFound, pkg_resources.VersionConflict):
                return False

        def install_requirements(requirements_path: str):
            """
            –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —Ñ–∞–π–ª–∞ requirements.txt,
            –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.

            :param requirements_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É requirements.txt.
            :type requirements_path: str
            """
            if not os.path.exists(requirements_path):
                return
            with open(requirements_path, "r", encoding="utf-8") as f:
                lines = f.readlines()

            missing_packages = []
            for line in lines:
                pkg = line.strip()
                if not pkg or pkg.startswith("#"):
                    continue
                if not is_package_installed(pkg):
                    missing_packages.append(pkg)

            if missing_packages:
                subprocess.check_call([sys.executable, "-m", "pip", "install", *missing_packages])

        for name in os.listdir(modules_path):
            bot_event_handlers = {}
            funpay_event_handlers = {}
            telegram_bot_routers = []
            
            module_path = os.path.join(modules_path, name)
            if os.path.isdir(module_path) and "__init__.py" in os.listdir(module_path):
                try:
                    install_requirements(os.path.join(module_path, "requirements.txt"))

                    module = importlib.import_module(f"modules.{name}")
                    if hasattr(module, "BOT_EVENT_HANDLERS"):
                        for key, funcs in module.BOT_EVENT_HANDLERS.items():
                            bot_event_handlers.setdefault(key, []).extend(funcs)
                    if hasattr(module, "FUNPAY_EVENT_HANDLERS"):
                        for key, funcs in module.FUNPAY_EVENT_HANDLERS.items():
                            funpay_event_handlers.setdefault(key, []).extend(funcs)
                    if hasattr(module, "TELEGRAM_BOT_ROUTERS"):
                        telegram_bot_routers.extend(module.TELEGRAM_BOT_ROUTERS)
                    
                    module_data = Module(
                        enabled=False,
                        meta=ModuleMeta(
                            module.PREFIX,
                            module.VERSION,
                            module.NAME,
                            module.DESCRIPTION,
                            module.AUTHORS,
                            module.LINKS
                        ),
                        bot_event_handlers=bot_event_handlers,
                        funpay_event_handlers=funpay_event_handlers,
                        telegram_bot_routers=telegram_bot_routers
                    )
                    modules.append(module_data)
                except Exception as e:
                    print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {name}: {Fore.WHITE}{e}")
        return modules

    @staticmethod
    def connect_modules(modules: list[Module]):
        """ –ü–æ–¥–∫–ª—é—á–∞–µ—Ç (–≤–∫–ª—é—á–∞–µ—Ç) –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤–µ –º–æ–¥—É–ª–∏. """
        global _loaded_modules
        names = []
        for module in modules:
            try:
                HandlersManager.register_bot_event_handlers(module.bot_event_handlers)
                HandlersManager.register_funpay_event_handlers(module.funpay_event_handlers)
                i = _loaded_modules.index(module)
                module.enabled = True
                _loaded_modules[i] = module
                names.append(f"{Fore.LIGHTYELLOW_EX}{module.meta.name} {Fore.LIGHTWHITE_EX}{module.meta.version}")
            except Exception as e:
                print(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module.meta.name}: {Fore.WHITE}{e}")
                continue
        print(f'{Fore.WHITE}üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ {Fore.LIGHTWHITE_EX}{len(modules)} –º–æ–¥—É–ª—è(-–µ–π): {f"{Fore.WHITE}, ".join(names)}')