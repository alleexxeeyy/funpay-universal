from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..callback_datas import user_callback_datas as CallbackDatas

from fpbot.funpaybot import FunPayBot as MainFunPayBot

from ...fpbot.data import Data
from ...settings import Config
from ...meta import NAME, VERSION

funpaybot = MainFunPayBot()


class Navigation:
    """ –®–∞–±–ª–æ–Ω—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É """
    class MenuNavigation:
        class Default:
            def text() -> str:
                msg = f"üìà <b>–ú–µ–Ω—é {NAME}</b>" \
                      f"\n" \
                      f"\n<b>{NAME}</b> v{VERSION} " \
                      f"\n–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å" \
                      f"\n" \
                      f"\n<b>–°—Å—ã–ª–∫–∏:</b>" \
                      f"\n‚Üí <b>@alleexxeeyy</b> ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" \
                      f"\n‚Üí <b>@alexey_production_bot</b> ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π" \
                      f"\n" \
                      f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data=CallbackDatas.TestModule_SettingsNavigation(
                        to="default"
                    ).pack()
                )
                btn2 = InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=CallbackDatas.TestModule_MenuNavigation(
                        to="stats"
                    ).pack()
                )
                btn3 = InlineKeyboardButton(
                    text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                    callback_data=CallbackDatas.TestModule_InstructionNavigation(
                        to="default"
                    ).pack()
                )
                btn4 = InlineKeyboardButton(
                    text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    url="https://t.me/alleexxeeyy",
                )
                btn5 = InlineKeyboardButton(
                    text="ü§ñ –ù–∞—à –±–æ—Ç",
                    url="https://t.me/alexey_production_bot",
                )

                rows = [[btn1, btn2], [btn3], [btn4, btn5]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Stats:
            class Error:
                def text() -> str:
                    msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {NAME}</b>" \
                        f"\n" \
                        f"\n‚Üí –ö–∞–∫–∞—è-—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {NAME}</b>" \
                        f"\n" \
                        f"\n‚Üí –ö–∞–∫–∞—è-—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                
            class Default:
                def text() -> str:
                    msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {NAME}</b>" \
                        f"\n" \
                        f"\n‚Üí –ö–∞–∫–∞—è-—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <code>123</code>" \
                        f"\n" \
                        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                    return msg
                    
                def kb() -> InlineKeyboardMarkup:
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.TestModule_MenuNavigation(
                            to="stats"
                        ).pack()
                    )
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.TestModule_MenuNavigation(
                            to="default"
                        ).pack()
                    )
                    rows = [[btn_refresh], [btn_back]]
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
    class InstructionNavigation:
        class Default:
            def text() -> str:
                msg = f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {NAME}</b>" \
                    "\n–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥—É–ª–µ–º" \
                    "\n" \
                    "\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ ‚Üì"
                return msg
                
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã",
                    callback_data=CallbackDatas.TestModule_InstructionNavigation(
                        to="commands"
                    ).pack()
                )
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.TestModule_MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1], [btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class Commands:
            def text() -> str:
                msg = f"üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {NAME}</b> ‚Üí ‚å®Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã</b>" \
                    "\n" \
                    "\n‚Üí <code>!–Ω–µ–∫–æ—Ç–æ—Ä–∞—è-–∫–æ–º–∞–Ω–¥–∞</code> ‚Äî –¥–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ" \
                    "\n" \
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
                return msg
            
            def kb() -> InlineKeyboardMarkup:
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.TestModule_MenuNavigation(
                        to="instruction"
                    ).pack()
                )
                rows = [[btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup

    class SettingsNavigation:
        class Default:
            def text() -> str:
                msg = f"üîå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {NAME}</b>" \
                      f"\n–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üì"
                return msg
            
            def kb() -> InlineKeyboardMarkup:
                btn1 = InlineKeyboardButton(
                    text="üåê –ö–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data=CallbackDatas.TestModule_SettingsNavigation(
                        to="some_section"
                    ).pack()
                )
                btn_back = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=CallbackDatas.TestModule_MenuNavigation(
                        to="default"
                    ).pack()
                )
                rows = [[btn1], [btn_back]]
                markup = InlineKeyboardMarkup(inline_keyboard=rows)
                return markup
            
        class SomeSection:
            class Error:
                def text() -> str:
                    msg = f"üîå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {NAME}</b> ‚Üí üåê <b>–ö–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"\
                            f"\n" \
                            f"\n‚Üí bool –∑–Ω–∞—á–µ–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n‚Üí int –∑–Ω–∞—á–µ–Ω–∏–µ: <i>–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Loading:
                def text() -> str:
                    msg = f"üîå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {NAME}</b> ‚Üí üåê <b>–ö–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"\
                            f"\n" \
                            f"\n‚Üí bool –∑–Ω–∞—á–µ–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n‚Üí int –∑–Ω–∞—á–µ–Ω–∏–µ: <i>–∑–∞–≥—Ä—É–∑–∫–∞</i>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

            class Default:
                def text() -> str:
                    config = Config().get()
                    bool_enabled = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if config["some_bool_value"] else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                    msg = f"üîå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {NAME}</b> ‚Üí üåê <b>–ö–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"\
                            f"\n" \
                            f"\n‚Üí bool –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{bool_enabled}</code>" \
                            f"\n‚Üí int –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['some_first_int_value']}</code>" \
                            f"\n" \
                            f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Üì"
                    return msg

                def kb() -> InlineKeyboardMarkup:
                    rows = []
                    config = Config().get()
                    if config["some_bool_value"]:
                        btn_disable = InlineKeyboardButton(
                            text="üî¥ –í–´–ö–õ bool –∑–Ω–∞—á–µ–Ω–∏–µ",
                            callback_data="tm_disable_some_bool_value"
                        )
                        rows.append([btn_disable])
                    else:
                        btn_enable = InlineKeyboardButton(
                            text="üü¢ –í–ö–õ bool –∑–Ω–∞—á–µ–Ω–∏–µ",
                            callback_data="tm_enable_some_bool_value"
                        )
                        rows.append([btn_enable])
                    btn1 = InlineKeyboardButton(
                        text="‚úèÔ∏è int –∑–Ω–∞—á–µ–Ω–∏–µ",
                        callback_data="tm_enter_some_first_int_value"
                    )
                    rows.append([btn1])
                    btn_refresh = InlineKeyboardButton(
                        text="üîÑÔ∏è –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data=CallbackDatas.TestModule_SettingsNavigation(
                            to="some_section"
                        ).pack()
                    )
                    rows.append([btn_refresh])
                    btn_back = InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=CallbackDatas.TestModule_SettingsNavigation(
                            to="default"
                        ).pack()
                    )
                    rows.append([btn_back])
                    markup = InlineKeyboardMarkup(inline_keyboard=rows)
                    return markup
                
            class EnterSomeFirstIntValue:
                def text() -> str:
                    config = Config().get()
                    msg = f"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ int –∑–Ω–∞—á–µ–Ω–∏–µ ‚Üì</b>" \
                          f"\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{config['some_first_int_value']}</code>"
                    return msg
                
            class SomeFirstIntValueChanged:
                def text(new) -> str:
                    msg = f"‚úÖ <b>int –∑–Ω–∞—á–µ–Ω–∏–µ</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <code>{new}</code>" 
                    return msg