import os
import json
import uuid
from colorama import Fore, Style
from .meta import NAME


class Config():
    def __init__(self):
        current_dir = os.path.dirname(__file__)
        self.config_path = os.path.join(current_dir, 'module_settings', 'config.json')
    
    def get(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ """
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        except:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(Config.default_config(), f, indent=4, ensure_ascii=False)
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        finally:
            return config
    
    def update(self, new_data) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥

        :param new_data: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥–∞
        """
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, indent=4, ensure_ascii=False)

    def default_config() -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞ """
        return {
            "some_bool_value": True,
            "some_first_int_value": 0,
            "some_second_int_value": 321
        }
    
    def configure_config(self):
        """ –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ """
        params = {
            "some_first_int_value": {
                "required": True,
                "type": int,
                "desc": [
                    "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                ]
            },
            "some_second_int_value": {
                "required": False,
                "type": int,
                "desc": [
                    "–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                ]
            }
        }

        config = self.get()
        answers = {}
        print(f"\n{Fore.LIGHTWHITE_EX}‚Üì –í—Å–µ–≥–æ {Fore.LIGHTCYAN_EX}{len(params.keys())} {Fore.LIGHTWHITE_EX}–ø–∞—Ä–∞–º–µ—Ç—Ä–∞(-–æ–≤), –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ ( Õ°¬∞ Õú ñ Õ°¬∞)")
        i=0
        for param in params.keys():
            if param in config:
                i+=1
                default_value = config[param] if config[param] else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                desc = "¬∑ " + "\n¬∑ ".join(params[param]["desc"])
                print(f"\n{Fore.LIGHTWHITE_EX}‚öôÔ∏è {i}. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTCYAN_EX}{param}."
                      f"\n{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTCYAN_EX}{default_value}"
                      f"\n{Fore.WHITE}–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: \n{Fore.LIGHTCYAN_EX}{desc}"
                      f'\n{Fore.WHITE}–í–≤–æ–¥ {"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" if params[param]["required"] == True else "–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"}')
                if not params[param]["required"]:
                    print(f"{Fore.LIGHTWHITE_EX}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTCYAN_EX}{default_value}")
                a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
                
                if params[param]["type"] is int:
                    try:
                        if int(a) > 0:
                            print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{param} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {Fore.LIGHTCYAN_EX}{a}")
                            answers[param] = int(a)
                            continue
                        elif int(a) <= 0:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                            break
                    except:
                        if not a and not params[param]["required"]:
                            answers[param] = default_value
                            print(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTCYAN_EX}{default_value}")
                        elif not a and params[param]["required"]:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                            break
                        else:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º")
                            break
                elif params[param]["type"] is str:
                    try:
                        if len(a) > 0:
                            print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{param} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {Fore.LIGHTCYAN_EX}{a}")
                            answers[param] = str(a)
                            continue
                        elif not a and params[param]["required"]:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                            break
                        elif not a and not params[param]["required"]:
                            answers[param] = default_value
                            print(f"{Fore.WHITE}–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTCYAN_EX}{default_value}")
                    except:
                        print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º")
                        break
        else:
            print(f"\n{Fore.LIGHTWHITE_EX}‚úì –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            print(f"{Fore.WHITE}–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
            print(f"{Fore.WHITE}–ü–∞—Ä–∞–º–µ—Ç—Ä: {Fore.LIGHTCYAN_EX}*–≤–∞—à –æ—Ç–≤–µ—Ç*{Fore.WHITE} | {Fore.LIGHTCYAN_EX}*–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é*")
            print(f"{Fore.LIGHTWHITE_EX}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
            for answer_param in answers.keys():
                default_value = config[answer_param] if config[answer_param] else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                print(f"{Fore.WHITE}{answer_param}: {Fore.LIGHTCYAN_EX}{answers[answer_param]}{Fore.WHITE} | {Fore.LIGHTCYAN_EX}{default_value}")
            print(f"\n{Fore.WHITE}üíæ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ç–µ–∫—É—â–∏–º–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏? +/-")
            a = input(f"{Fore.WHITE}> ")

            if a == "+":
                for answer_param in answers.keys():
                    config[answer_param] = answers[answer_param]
                    Config().update(config)
                print(f"{Fore.LIGHTYELLOW_EX}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥ –º–æ–¥—É–ª—è {NAME}\n")
                return True
            else:
                print(f"\n{Fore.WHITE}–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∏—Ö —Å –Ω–∞—á–∞–ª–∞...")
                return self.configure_config()
        print(f"{Fore.WHITE}–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏ –ø–æ—ç—Ç–æ–º—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        return self.configure_config()