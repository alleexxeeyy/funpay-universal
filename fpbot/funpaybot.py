import asyncio
import time
from datetime import datetime, timedelta
from typing import  Optional
import time
import traceback
from threading import Thread
from colorama import Fore
import queue
from rapidfuzz import fuzz


import settings
from settings import Settings as sett
from data import Data as data
from logging import getLogger
from fpbot.stats import get_stats, set_stats
from . import set_funpay_bot
from tgbot import get_telegram_bot, get_telegram_bot_loop
from tgbot.templates import log_text
from fpbot import get_funpay_bot

from FunPayAPI import Account, Runner, exceptions as fpapi_exceptions, types as fpapi_types
from FunPayAPI.common.enums import *
from FunPayAPI.updater.events import *

from __init__ import VERSION, ACCENT_COLOR
from core.console import set_title, restart
from core.handlers_manager import HandlersManager

from services.fp_support import FunPaySupportAPI

PREFIX = F"{Fore.CYAN}[FP]{Fore.WHITE}"



class FunPayBot:
    """
    –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π FunPay –±–æ—Ç–∞.
    """

    def __init__(self):
        self.config = sett.get("config")
        self.messages = sett.get("messages")
        self.custom_commands = sett.get("custom_commands")
        self.auto_deliveries = sett.get("auto_deliveries")
        self.logger = getLogger(f"universal.funpay")

        try:
            proxy = {"https": "http://" + self.config["funpay"]["api"]["proxy"].replace("https://", "").replace("http://", ""), "http": "http://" + self.config["funpay"]["api"]["proxy"].replace("https://", "").replace("http://", "")} if self.config["funpay"]["api"]["proxy"] else None
            self.funpay_account = Account(golden_key=self.config["funpay"]["api"]["golden_key"],
                                          user_agent=self.config["funpay"]["api"]["user_agent"],
                                          requests_timeout=self.config["funpay"]["api"]["requests_timeout"],
                                          proxy=proxy or None).get()
            """ –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã FunPay –∞–∫–∫–∞—É–Ω—Ç–∞. """
        except fpapi_exceptions.UnauthorizedError as e:
            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É FunPay –∞–∫–∫–∞—É–Ω—Ç—É. –û—à–∏–±–∫–∞: {Fore.WHITE}{e.short_str()}")
            print(f"{Fore.WHITE}üîë  –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π {Fore.YELLOW}golden_key{Fore.WHITE}? +/-")
            a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
            if a == "+":
                param = {"funpay": {"api": {"golden_key": settings.DATA["config"]["params"]["funpay"]["api"]["golden_key"]}}}
                sett.configure("config", ACCENT_COLOR, params=param)
                restart()
            else:
                self.logger.info(f"{PREFIX} –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É...")
                restart()
        except AttributeError as e:
            if "proxy" in traceback.format_exc():
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É FunPay –∞–∫–∫–∞—É–Ω—Ç—É. –û—à–∏–±–∫–∞: {Fore.WHITE}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ?")
                print(f"{Fore.WHITE}üåê  –£–±—Ä–∞—Ç—å {Fore.LIGHTCYAN_EX}–ø—Ä–æ–∫—Å–∏{Fore.WHITE} –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ –Ω–µ–≥–æ? +/-")
                a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
                if a == "+":
                    self.config["funpay"]["api"]["proxy"] = ""
                    sett.set("config", self.config)
                    restart()
                else:
                    self.logger.info(f"{PREFIX} –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É...")
                    restart()

        self.initialized_users = data.get("initialized_users")
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. """
        self.categories_raise_time = data.get("categories_raise_time")
        """ –°–ª–µ–¥—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ–¥–Ω—è—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π. """
        self.auto_support_tickets = data.get("auto_support_tickets")
        """ –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. """
        self.stats = get_stats()
        """ –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞. """
        self.task_queue = queue.Queue()
        """ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. """

        # –≠—Ç–∏ –∏–≤–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        # –±–æ—Ç–∞ –∏ –æ–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω
        self.lots_raise_next_time = datetime.now()
        """ –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è –ª–æ—Ç–æ–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–µ). """
        self.refresh_funpay_account_next_time = datetime.now() + timedelta(seconds=3600)
        """ –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FunPay –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PHPSESSID) """

        set_funpay_bot(self) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞

    def msg(self, message_name: str, exclude_watermark: bool = False, **kwargs) -> str:
        """ 
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param message_name: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π (ID).
        :type message_name: `str`

        :param exclude_watermark: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.
        :type exclude_watermark: `bool`
        """

        class SafeDict(dict):
            def __missing__(self, key):
                return "{" + key + "}"
        
        message_lines: list[str] = self.messages[message_name]
        if message_lines:
            try:
                formatted_lines = [line.format_map(SafeDict(**kwargs)) for line in message_lines]
                msg = "\n".join(formatted_lines)
                if not exclude_watermark and self.config["funpay"]["bot"]["messages_watermark_enabled"]:
                    msg += f'\n{self.config["funpay"]["bot"]["messages_watermark"]}' or ""
                return msg
            except:
                pass
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    def get_lot_by_order_title(self, title: str, subcategory: types.SubCategory,
                               max_attempts: int = 3) -> types.LotShortcut:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞.

        :param title: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
        :type title: `str`

        :param subcategory: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–∞–∑–∞.
        :type subcategory: `FunPayAPI.types.SubCategory`

        :return: –û–±—ä–µ–∫—Ç –ª–æ—Ç–∞.
        :rtype: `FunPayAPI.types.LotShortcut`
        """
        for _ in range(max_attempts-1):
            try:
                profile = self.funpay_account.get_user(self.funpay_account.id)
                lots = profile.get_sorted_lots(2)
                candidates = []
                for lot_subcat, lot_data in lots.items():
                    if subcategory and lot_subcat.id != subcategory.id:
                        continue
                    for _, lot in lot_data.items():
                        if not lot.title:
                            continue
                        if lot.title.strip() == title.strip():
                            return lot
                        score = fuzz.partial_ratio(title, lot.title)
                        token_score = fuzz.token_set_ratio(title, lot.title)
                        score = max(score, token_score)
                        candidates.append((score, lot))
                if not candidates:
                    return None
                candidates.sort(key=lambda x: x[0], reverse=True)
                best_score, best_lot = candidates[0]
                result = best_lot if best_score >= 70 else None
                if not result:
                    continue
                return result
            except:
                continue
        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ {Fore.LIGHTWHITE_EX}¬´{title}¬ª")
    
    def raise_lots(self):
        """
        –ü–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ª–æ—Ç—ã –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ—Ñ–∏–ª—è FunPay,
        –∏–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ
        """
        self.lots_raise_next_time = datetime.now() + timedelta(hours=4)
        raised_categories = []
        profile = self.funpay_account.get_user(self.funpay_account.id)
        for subcategory in list(profile.get_sorted_lots(2).keys()):
            category = subcategory.category
            if str(subcategory.id) in self.categories_raise_time:
                if datetime.now() < datetime.fromisoformat(self.categories_raise_time[str(subcategory.id)]):
                    continue
            try:
                self.funpay_account.raise_lots(category.id)
                raised_categories.append(category.name)
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–Ω—è—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ç–æ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—ë –ø–æ–¥–Ω—è—Ç–∏–µ,
                # —á—Ç–æ–±—ã —Å–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –µ—ë —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è
                self.funpay_account.raise_lots(category.id)
            except fpapi_exceptions.RaiseError as e:
                if e.wait_time is not None:
                    self.categories_raise_time[str(subcategory.id)] = (datetime.now() + timedelta(seconds=e.wait_time)).isoformat()
                else:
                    del self.categories_raise_time[str(subcategory.id)]
            except fpapi_exceptions.RequestFailedError as e:
                if e.status_code == 429:
                    self.logger.error(f"{PREFIX} –ü—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ 429 —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–¥–Ω—è—Ç—å –ª–æ—Ç—ã —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
                    self.lots_raise_next_time = datetime.now() + timedelta(minutes=5)
                    return
            time.sleep(1)

        for category in self.categories_raise_time:
            if datetime.fromisoformat(self.categories_raise_time[category]) < self.lots_raise_next_time:
                self.lots_raise_next_time = datetime.fromisoformat(self.categories_raise_time[category])
        if len(raised_categories) > 0:
            self.logger.info(f'{PREFIX} {Fore.LIGHTYELLOW_EX}‚Üë –ü–æ–¥–Ω—è—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {Fore.LIGHTWHITE_EX}{f"{Fore.WHITE}, {Fore.LIGHTWHITE_EX}".join(map(str, raised_categories))}')

    def send_message(self, chat_id: int | str, text: Optional[str] = None, chat_name: Optional[str] = None,
                     interlocutor_id: Optional[int] = None, image_id: Optional[int] = None, add_to_ignore_list: bool = True,
                     update_last_saved_message: bool = False, leave_as_unread: bool = False, max_attempts: int = 3) -> types.Message:
        """
        –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç FunPay.
        –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è.
        
        :param chat_id: ID —á–∞—Ç–∞.
        :type chat_id: :obj:`int` or :obj:`str`

        :param text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        :type text: :obj:`str` or :obj:`None`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :param chat_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è) (–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç).
        :type chat_name: :obj:`str` or :obj:`None`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :param interlocutor_id: ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç).
        :type interlocutor_id: :obj:`int` or :obj:`None`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :param image_id: ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.
        :type image_id: :obj:`int` or :obj:`None`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :param add_to_ignore_list: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ Runner'–∞?
        :type add_to_ignore_list: :obj:`bool`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :param update_last_saved_message: –æ–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ Runner'–µ?
        :type update_last_saved_message: :obj:`bool`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.

        :param leave_as_unread: –æ—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ?
        :type leave_as_unread: :obj:`bool`, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

        :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        :rtype: :class:`FunPayAPI.types.Message`
        """
        for _ in range(max_attempts-1):
            try:
                mess = self.funpay_account.send_message(chat_id, text, chat_name, interlocutor_id, 
                                                        image_id, add_to_ignore_list, 
                                                        update_last_saved_message, leave_as_unread)
                return mess
            except:
                continue
        self.logger.error(f"{PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {Fore.LIGHTWHITE_EX}¬´{text}¬ª {Fore.LIGHTRED_EX}–≤ —á–∞—Ç {Fore.WHITE}{chat_id} {Fore.LIGHTRED_EX}")

    def log_to_tg(self, text: str):
        """
        –õ–æ–≥–≥–∏—Ä—É–µ—Ç –∏–≤–µ–Ω—Ç –≤ Telegram –±–æ—Ç–∞.

        :param text: –¢–µ–∫—Å—Ç –ª–æ–≥–∞.
        :type text: `str`
        """
        asyncio.run_coroutine_threadsafe(get_telegram_bot().log_event(text), get_telegram_bot_loop())
    
    
    def create_support_tickets(self):
        try:
            last_time = datetime.now()
            self.auto_support_tickets["last_time"] = last_time.isoformat()
            data.set("auto_support_tickets", self.auto_support_tickets)
            fpbot = get_funpay_bot()
            support_api = FunPaySupportAPI(fpbot.funpay_account).get()
            self.logger.info(f"{PREFIX} üìû  –°–æ–∑–¥–∞—é —Ç–∏–∫–µ—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤...")

            def calculate_orders(all_orders, orders_per_ticket=25):
                return [all_orders[i:i+orders_per_ticket] for i in range(0, len(all_orders), orders_per_ticket)]

            all_sales: list[fpapi_types.OrderShortcut] = []
            start_from = self.auto_support_tickets["next_start_from"] if self.auto_support_tickets["next_start_from"] != None else None
            while len(all_sales) < fpbot.funpay_account.active_sales:
                sales = fpbot.funpay_account.get_sales(start_from=start_from, include_paid=True, include_closed=False, include_refunded=False)
                for sale in sales[1]:
                    all_sales.append(sale)
                start_from = sales[0]
                time.sleep(0.5)
            
            order_ids = calculate_orders([order.id for order in all_sales], self.config["funpay"]["bot"]["auto_support_tickets_orders_per_ticket"])
            ticketed_orders = []
            for order_ids_per_ticket in order_ids:
                formatted_order_ids = ", ".join(order_ids_per_ticket)
                resp: dict = support_api.create_ticket(formatted_order_ids, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {formatted_order_ids}. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, {fpbot.funpay_account.username}!")
                if resp.get("error") or not resp.get("action") or resp["action"]["message"] != "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.":
                    self.auto_support_tickets["next_start_from"] = order_ids_per_ticket[0]
                    break
                ticketed_orders.extend(order_ids_per_ticket)
                self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}{resp['action']['url'].split('/')[-1]} (https://support.funpay.com{resp['action']['url']}) {Fore.WHITE}‚Äî —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {Fore.LIGHTYELLOW_EX}{len(order_ids_per_ticket)} –∑–∞–∫–∞–∑–æ–≤")
            else:
                self.auto_support_tickets["next_start_from"] = None
            self.auto_support_tickets["last_time"] = (datetime.now() + timedelta(seconds=fpbot.config["funpay"]["bot"]["auto_support_tickets_create_interval"])).isoformat()
            
            if len(ticketed_orders) == 0 and self.auto_support_tickets["next_start_from"] is not None:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {Fore.WHITE}{resp.get('error') if resp else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'}")
            elif len(ticketed_orders) >= 0:
                self.logger.info(f"{PREFIX} {Fore.LIGHTYELLOW_EX}üìû‚úÖ  –°–æ–∑–¥–∞–ª {Fore.LIGHTWHITE_EX}{len(calculate_orders(ticketed_orders))} —Ç–∏–∫–µ—Ç–∞(-–æ–≤) –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É {Fore.LIGHTYELLOW_EX}–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ {Fore.LIGHTWHITE_EX}{len(ticketed_orders)} –∑–∞–∫–∞–∑–æ–≤")
            next_time = last_time + timedelta(seconds=self.config["funpay"]["bot"]["auto_support_tickets_create_interval"])
            self.logger.info(f"{PREFIX} –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç {Fore.LIGHTWHITE_EX}{next_time.strftime(f'%d.%m{Fore.WHITE} –≤ {Fore.LIGHTWHITE_EX}%H:%M')}")
        except Exception as e:
            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
            traceback.print_exc()
    
    async def run_bot(self):

        self.logger.info(f"{PREFIX} FunPay –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ {Fore.LIGHTWHITE_EX}{self.funpay_account.username}{Fore.WHITE}, –±–∞–ª–∞–Ω—Å {Fore.LIGHTWHITE_EX}{self.funpay_account.total_balance} {self.funpay_account.currency.name}{Fore.WHITE}")
        if self.config["funpay"]["api"]["proxy"]:
            ip_port = self.config['funpay']['api']['proxy'].split("@")[1] if "@" in self.config['funpay']['api']['proxy'] else self.config['funpay']['api']['proxy']
            self.logger.info(f"{PREFIX} FunPay –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–∫—Å–∏ {Fore.LIGHTWHITE_EX}{ip_port}")

        def handler_on_funpay_bot_init(fpbot: FunPayBot):
            """ –ù–∞—á–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ON_INIT """

            def worker():
                while True:
                    func, args, kwargs = self.task_queue.get()
                    func(*args, **kwargs)
                    self.task_queue.task_done()
            Thread(target=worker, daemon=True).start()

            def endless_loop(cycle_delay=5):
                while True:
                    try:
                        set_funpay_bot(fpbot)
                        set_title(f"FunPay Universal v{VERSION} | {self.funpay_account.username}: {self.funpay_account.total_balance} {self.funpay_account.currency.name}. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {self.funpay_account.active_sales}")
                        
                        if fpbot.initialized_users != data.get("initialized_users"): data.set("initialized_users", fpbot.initialized_users)
                        if fpbot.categories_raise_time != data.get("categories_raise_time"): data.set("categories_raise_time", fpbot.categories_raise_time)
                        if fpbot.auto_support_tickets != data.get("auto_support_tickets"): fpbot.auto_support_tickets = data.get("auto_support_tickets")
                        fpbot.config = sett.get("config") if fpbot.config != sett.get("config") else fpbot.config
                        fpbot.messages = sett.get("messages") if fpbot.messages != sett.get("messages") else fpbot.messages
                        fpbot.custom_commands = sett.get("custom_commands") if fpbot.custom_commands != sett.get("custom_commands") else fpbot.custom_commands
                        fpbot.auto_deliveries = sett.get("auto_deliveries") if fpbot.auto_deliveries != sett.get("auto_deliveries") else fpbot.auto_deliveries

                        if datetime.now() > self.refresh_funpay_account_next_time:
                            proxy = {"https": "http://" + self.config["funpay"]["api"]["proxy"].replace("https://", "").replace("http://", ""), "http": "http://" + self.config["funpay"]["api"]["proxy"].replace("https://", "").replace("http://", "")} if self.config["funpay"]["api"]["proxy"] else None
                            self.funpay_account = Account(golden_key=self.config["funpay"]["api"]["golden_key"],
                                                          user_agent=self.config["funpay"]["api"]["user_agent"],
                                                          requests_timeout=self.config["funpay"]["api"]["requests_timeout"],
                                                          proxy=proxy or None).get(update_phpsessid=True)
                            self.refresh_funpay_account_next_time = datetime.now() + timedelta(seconds=2400)

                        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤ ---
                        if fpbot.config["funpay"]["bot"]["auto_raising_lots_enabled"] and datetime.now() > fpbot.lots_raise_next_time:
                            self.task_queue.put((fpbot.raise_lots, (), {}))

                        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤ ---
                        if datetime.now() >= (datetime.fromisoformat(self.auto_support_tickets["last_time"]) + timedelta(seconds=self.config["funpay"]["bot"]["auto_support_tickets_create_interval"])) if self.auto_support_tickets["last_time"] else datetime.now():
                            self.auto_support_tickets["last_time"] = datetime.now().isoformat()
                            data.set("auto_support_tickets", self.auto_support_tickets)
                            self.task_queue.put((fpbot.create_support_tickets, (), {}))
                    except Exception:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                        traceback.print_exc()
                    time.sleep(cycle_delay)

            Thread(target=endless_loop, daemon=True).start()
        
        bot_event_handlers = HandlersManager.get_bot_event_handlers()
        bot_event_handlers["ON_FUNPAY_BOT_INIT"].insert(0, handler_on_funpay_bot_init)
        HandlersManager.set_bot_event_handlers(bot_event_handlers)

        async def handler_new_message(fpbot: FunPayBot, event: NewMessageEvent):
            try:
                this_chat = fpbot.funpay_account.get_chat_by_name(event.message.chat_name, True)
                if fpbot.config["funpay"]["bot"]["tg_logging_enabled"] and (fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_user_message"] or fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_system_message"]):
                    if event.message.author != fpbot.funpay_account.username:
                        do = False
                        if fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_user_message"] and event.message.author.lower() != "funpay": do = True 
                        if fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_system_message"] and event.message.author.lower() == "funpay": do = True 
                        if do:
                            text = f"<b>{event.message.author}:</b> {event.message.text or ''}"
                            if event.message.image_link:
                                text += f' <b><a href="{event.message.image_link}">{event.message.image_name}</a></b>'
                            fpbot.log_to_tg(log_text(f'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <a href="https://funpay.com/chat/?node={event.message.chat_id}">—á–∞—Ç–µ</a>', text.strip()))

                if this_chat.name not in fpbot.initialized_users:
                    try:
                        if self.config["funpay"]["bot"]["first_message_enabled"]:
                            if event.message.type is MessageTypes.NON_SYSTEM and event.message.author == this_chat.name:
                                fpbot.send_message(this_chat.id, fpbot.msg("user_not_initialized", username=event.message.author))
                        fpbot.initialized_users.append(this_chat.name)
                    except Exception as e:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {event.message.author} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")

                if event.message.author == this_chat.name:
                    if self.config["funpay"]["bot"]["custom_commands_enabled"]:
                        if event.message.text in self.custom_commands.keys():
                            try:
                                message = "\n".join(self.custom_commands[event.message.text])
                                fpbot.send_message(this_chat.id, message)
                            except Exception as e:
                                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã \"{event.message.text}\" —É {event.message.author} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                                fpbot.send_message(this_chat.id, fpbot.msg("command_error"))
                    if str(event.message.text).lower() == "!–∫–æ–º–∞–Ω–¥—ã" or str(event.message.text).lower() == "!commands":
                        try:
                            fpbot.send_message(this_chat.id, fpbot.msg("buyer_command_commands"))
                        except Exception as e:
                            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã \"!–∫–æ–º–∞–Ω–¥—ã\" —É {event.message.author} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                            fpbot.send_message(this_chat.id, fpbot.msg("command_error"))
                    elif str(event.message.text).lower() == "!–ø—Ä–æ–¥–∞–≤–µ—Ü" or str(event.message.text).lower() == "!seller":
                        try:
                            asyncio.run_coroutine_threadsafe(get_telegram_bot().call_seller(event.message.author, this_chat.id), get_telegram_bot_loop())
                            fpbot.send_message(this_chat.id, fpbot.msg("buyer_command_seller"))
                        except Exception as e:
                            self.logger.log(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã \"!–ø—Ä–æ–¥–∞–≤–µ—Ü\" —É {event.message.author} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                            fpbot.send_message(this_chat.id, fpbot.msg("command_error"))

                if event.message.type is MessageTypes.NEW_FEEDBACK:
                    review_author = event.message.text.split(' ')[1]
                    review_order_id = event.message.text.split(' ')[-1].replace('#', '').replace('.', '')
                    order = fpbot.funpay_account.get_order(review_order_id)
                    review = order.review
                    self.logger.info(f"{PREFIX} {Fore.LIGHTYELLOW_EX}‚ú®üí¨ –ù–æ–≤—ã–π {'‚≠ê' * review.stars} –æ—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑ {Fore.LIGHTWHITE_EX}{order.id}{Fore.LIGHTYELLOW_EX} –æ—Ç {Fore.LIGHTWHITE_EX}{order.buyer_username}{Fore.LIGHTYELLOW_EX}")
                    if fpbot.config["funpay"]["bot"]["tg_logging_enabled"] and fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_review"]:
                        fpbot.log_to_tg(log_text(f'‚ú®üí¨ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑ <a href="https://funpay.com/orders/{review_order_id}/">#{review_order_id}</a>', f"<b>‚îè –û—Ü–µ–Ω–∫–∞:</b> {'‚≠ê' * review.stars}\n<b>‚î£ –û—Å—Ç–∞–≤–∏–ª:</b> {review.author}\n<b>‚îó –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b> {review.text}"))
                    if fpbot.config["funpay"]["bot"]["auto_reviews_replies_enabled"]:
                        try:
                            fpbot.funpay_account.send_review(review_order_id, fpbot.msg("order_review_reply_text",
                                                                                        review_date=datetime.now().strftime("%d.%m.%Y"),
                                                                                        order_title=order.title,
                                                                                        order_amount=order.amount,
                                                                                        order_price=order.sum))
                        except Exception as e:
                            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()

        async def handler_new_order(fpbot: FunPayBot, event: NewOrderEvent):
            try:
                this_chat = fpbot.funpay_account.get_chat_by_name(event.order.buyer_username, True)
                self.logger.info(f"{PREFIX} {Fore.LIGHTYELLOW_EX}üìã  –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {Fore.LIGHTWHITE_EX}{event.order.id}{Fore.LIGHTYELLOW_EX} –æ—Ç {Fore.LIGHTWHITE_EX}{event.order.buyer_username}{Fore.LIGHTYELLOW_EX} –Ω–∞ —Å—É–º–º—É {Fore.LIGHTWHITE_EX}{event.order.price} {fpbot.funpay_account.currency.name}")
                if fpbot.config["funpay"]["bot"]["tg_logging_enabled"] and fpbot.config["funpay"]["bot"]["tg_logging_events"]["new_order"]:
                    fpbot.log_to_tg(log_text(f'üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ <a href="https://funpay.com/orders/{event.order.id}/">#{event.order.id}</a>', f"<b>‚îè –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {event.order.buyer_username}\n<b>‚î£ –¢–æ–≤–∞—Ä:</b> {event.order.description}\n<b>‚î£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {event.order.amount}\n<b>‚îó –°—É–º–º–∞:</b> {event.order.price} {fpbot.funpay_account.currency.name}"))
                if self.config["funpay"]["bot"]["auto_deliveries_enabled"]:
                    lot = self.get_lot_by_order_title(event.order.description, event.order.subcategory)
                    if lot:
                        if str(lot.id) in self.auto_deliveries.keys():
                            fpbot.send_message(this_chat.id, "\n".join(self.auto_deliveries[str(lot.id)]))
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{traceback.print_exc()}")
            
        async def handler_order_status_changed(fpbot: FunPayBot, event: OrderStatusChangedEvent):
            try:
                status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                if event.order.status is OrderStatuses.REFUNDED: status = "–í–æ–∑–≤—Ä–∞—Ç"
                elif event.order.status is OrderStatuses.CLOSED: status = "–ó–∞–∫—Ä—ã—Ç"
                self.logger.info(f"{PREFIX} {Fore.LIGHTYELLOW_EX}üîÑÔ∏èüìã  –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {Fore.LIGHTWHITE_EX}{event.order.id}{Fore.LIGHTYELLOW_EX} –æ—Ç {Fore.LIGHTWHITE_EX}{event.order.buyer_username}{Fore.LIGHTYELLOW_EX} –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {Fore.LIGHTWHITE_EX}¬´{status}¬ª")
                if fpbot.config["funpay"]["bot"]["tg_logging_enabled"] and fpbot.config["funpay"]["bot"]["tg_logging_events"]["order_status_changed"]:
                    fpbot.log_to_tg(log_text(f'üîÑÔ∏èüìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ <a href="https://funpay.com/orders/{event.order.id}/">#{event.order.id}</a> –∏–∑–º–µ–Ω–∏–ª—Å—è', f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status}"))
                try:
                    if event.order.status is OrderStatuses.CLOSED:
                        fpbot.stats.earned_money = round(fpbot.stats.earned_money + event.order.price, 2)
                    elif event.order.status is OrderStatuses.REFUNDED:
                        fpbot.stats.orders_refunded = fpbot.stats.orders_refunded + 1
                except Exception as e:
                    self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                finally:
                    set_stats(fpbot.stats)

                if event.order.status is OrderStatuses.CLOSED or event.order.status is OrderStatuses.REFUNDED:
                    if event.order.status is OrderStatuses.CLOSED:
                        chat = fpbot.funpay_account.get_chat_by_name(event.order.buyer_username, True)
                        fpbot.send_message(chat.id, fpbot.msg("order_confirmed"))
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{traceback.print_exc()}")
            
        funpay_event_handlers = HandlersManager.get_funpay_event_handlers()
        funpay_event_handlers[EventTypes.NEW_MESSAGE].insert(0, handler_new_message)
        funpay_event_handlers[EventTypes.NEW_ORDER].insert(0, handler_new_order)
        funpay_event_handlers[EventTypes.ORDER_STATUS_CHANGED].insert(0, handler_order_status_changed)
        HandlersManager.set_funpay_event_handlers(funpay_event_handlers)

        bot_event_handlers = HandlersManager.get_bot_event_handlers()
        def handle_on_funpay_bot_init():
            """ 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FunPay –±–æ—Ç–∞.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ON_FUNPAY_BOT_INIT 
            """
            if "ON_FUNPAY_BOT_INIT" in bot_event_handlers:
                for handler in bot_event_handlers["ON_FUNPAY_BOT_INIT"]:
                    try:
                        handler(self)
                    except Exception as e:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞ ON_FUNPAY_BOT_INIT: {Fore.WHITE}{e}")
        handle_on_funpay_bot_init()

        self.stats.bot_launch_time = datetime.now()
        set_stats(self.stats)
        self.logger.info(f"{PREFIX} –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω")
        runner = Runner(self.funpay_account)
        for event in runner.listen(requests_delay=self.config["funpay"]["api"]["runner_requests_delay"]):
            funpay_event_handlers = HandlersManager.get_funpay_event_handlers() # —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –∏–±–æ –º–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è/–≤–∫–ª—é—á–∞—Ç—å—Å—è
            if event.type in funpay_event_handlers:
                for handler in funpay_event_handlers[event.type]:
                    try:
                        await handler(self, event)
                    except Exception as e:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ {handler} –≤ –∏–≤–µ–Ω—Ç–µ {event.type.name}: {Fore.WHITE}{e}")