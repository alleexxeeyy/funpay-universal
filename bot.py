from core.modules_manager import load_modules, connect_modules, set_modules, enable_module, Module
from core.handlers_manager import register_bot_event_handlers, register_funpay_event_handlers

from core.console import set_title
import asyncio
from threading import Thread
import ctypes
from settings import Config
import traceback
from utils.logger import get_logger
logger = get_logger("UNIVERSAL")
from colorama import init, Fore, Style
init()

from fpbot.funpaybot import FunPayBot
from services.updater import Updater

class BotsManager:
    """ –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–æ–≤ """

    def __init__(self):
        self.tgbot = None
        self.fpbot = None
        self.fpbot_thread = None
        self.fpbot_loop = None

    async def start_funpay_bot(self):
        """ –ó–∞–ø—É—Å–∫–∞–µ—Ç FunPay –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ """
        if self.fpbot_thread is None or not self.fpbot_thread.is_alive():
            this_loop = asyncio.get_running_loop()
            self.fpbot_loop = asyncio.new_event_loop()
            self.fpbot = FunPayBot(self.tgbot, this_loop)

            def run():
                self.fpbot_loop.run_until_complete(self.fpbot.run_bot())
            
            self.fpbot_thread = Thread(target=run, daemon=True)
            self.fpbot_thread.start()
        else:
            raise Exception("FunPay –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

    async def stop_funpay_bot(self):
        """ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ FunPay –±–æ—Ç–∞ """
        if self.fpbot_thread.is_alive():
            tid = self.fpbot_thread.ident
            res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
                ctypes.c_long(tid),
                ctypes.py_object(SystemExit)  # –∏–ª–∏ KeyboardInterrupt
            )
            if res == 0:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Ç–æ–∫–∞")
            elif res > 1:
                ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
                raise Exception("PyThreadState_SetAsyncExc –≤—ã–∑–≤–∞–Ω –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞")

            self.fpbot_loop.call_soon_threadsafe(self.fpbot_loop.stop)
            self.fpbot_thread.join() # –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–∞
            self.fpbot = None
        else:
            raise Exception("FunPay –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    async def start_telegram_bot(self) -> None:
        """ –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ """
        from tgbot.telegrambot import TelegramBot
        config = Config().get()
        self.tgbot = TelegramBot(config["tg_bot_token"])
        
        await self.start_funpay_bot()

        self.tgbot.bot.bots_manager = self
        await self.tgbot.run_bot()


if __name__ == "__main__":
    """ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ """
    from bot_settings.app import CURRENT_VERSION
    try:
        set_title(f"FunPay Universal v{CURRENT_VERSION} by @alleexxeeyy")
        print(f"\n   {Fore.CYAN}FunPay Universal {Fore.WHITE}v{Fore.LIGHTWHITE_EX}{CURRENT_VERSION}"
              f"\n   {Fore.WHITE}‚Üí tg: {Fore.LIGHTWHITE_EX}@alleexxeeyy"
              f"\n   {Fore.WHITE}‚Üí tg channel: {Fore.LIGHTWHITE_EX}@alexeyproduction\n")
        
        Updater.check_for_updates()
        
        config = Config().get()
        if not config["golden_key"]:
            print(f"{Fore.WHITE}ü´∏  –ü–æ—Å—Ç–æ–π—Ç–µ... –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. "
                  f"–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –µ–≥–æ –≤–ø–µ—Ä–≤—ã–µ, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥—ë–º –±—ã—Å—Ç—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.")
            Config().configure_config()
        
        print(f"{Fore.WHITE}‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –ø–æ–¥–∫–ª—é—á–∞—é –º–æ–¥—É–ª–∏...")
        modules = load_modules()
        if len(modules) == 0:
            print(f"{Fore.WHITE}–ú–æ–¥—É–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        set_modules(modules)
        
        if len(modules) > 0:
            connect_modules(modules)
        
        for module in modules:
            if "ON_MODULE_CONNECTED" in module.bot_event_handlers and module.enabled:
                for handler in module.bot_event_handlers["ON_MODULE_CONNECTED"]:
                    try:
                        handler(module)
                    except Exception as e:
                        logger.error(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞ ON_MODULE_CONNECTED: {Fore.WHITE}{e}")

        from core.handlers_manager import _bot_event_handlers

        def handle_on_init():
            """ 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ñ—Ç–∞.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ON_INIT
            """
            if "ON_INIT" in _bot_event_handlers:
                for handler in _bot_event_handlers["ON_INIT"]:
                    try:
                        handler()
                    except Exception as e:
                        logger.error(f"{Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞ ON_INIT: {Fore.WHITE}{e}")
        handle_on_init()
        
        print(f"{Fore.WHITE}ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...\n")
        botsm = BotsManager()
        asyncio.run(botsm.start_telegram_bot())
    except Exception as e:
        print(traceback.print_exc())