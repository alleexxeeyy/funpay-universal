import os
import json
import copy
from colorama import Fore, Style
from colorama.ansi import AnsiFore

DATA = {
    "config": {
        "path": "bot_settings/config.json",
        "default": {
            "funpay": {
                "api": {
                    "golden_key": "",
                    "user_agent": "",
                    "proxy": "",
                    "requests_timeout": 30,
                    "runner_requests_delay": 4
                },
                "bot": {
                    "messages_watermark_enabled": True,
                    "messages_watermark": "¬©Ô∏è ùóôùòÇùóªùó£ùóÆùòÜ ùó®ùóªùó∂ùòÉùó≤ùóøùòÄùóÆùóπ",
                    "first_message_enabled": True,
                    "custom_commands_enabled": True,
                    "auto_deliveries_enabled": True,
                    "auto_raising_lots_enabled": True,
                    "auto_reviews_replies_enabled": True,
                    "auto_support_tickets_enabled": True,
                    "auto_support_tickets_orders_per_ticket": 25,
                    "auto_support_tickets_create_interval": 86400
                }
            },
            "telegram": {
                "api": {
                    "token": ""
                },
                "bot": {
                    "password": "",
                    "signed_users": []
                }
            }
        },
        "params": {
            "funpay": {
                "api": {
                    "golden_key": {
                        "required": True,
                        "type": str,
                        "desc": [
                            "golden_key –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–ª —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
                            "–ï–≥–æ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ cookie —Å–∞–π—Ç–∞ funpay.com. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º Cookie-Editor."
                        ]
                    },
                    "user_agent": {
                        "required": False,
                        "type": str,
                        "desc": [
                            "–Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–ª —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.",
                            "–£–∑–Ω–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://www.whatismybrowser.com/detect/what-is-my-user-agent/ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —Å–∏–Ω–µ–º –æ–∫–æ—à–∫–µ."
                        ]
                    },
                    "proxy": {
                        "required": False,
                        "type": str,
                        "desc": [
                            "–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∫—Å–∏, —Ç–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–≥–æ.",
                            "–§–æ—Ä–º–∞—Ç: user:pass@ip:port –∏–ª–∏ ip:port"
                        ]
                    }
                }
            },
            "telegram": {
                "api": {
                    "token": {
                        "required": True,
                        "type": str,
                        "desc": [
                            "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –í TG –±–æ—Ç–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.",
                            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —É @BotFather. –ü–∏—à–∏—Ç–µ /newbot –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
                        ]
                    }
                },
                "bot": {
                    "password": {
                        "required": True,
                        "type": str,
                        "desc": [
                            "–ü–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞. –ë—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
                        ]
                    }
                }
            }
        }
    },
    "messages": {
        "path": "bot_settings/messages.json",
        "default": {
            "user_not_initialized": [
                "üëã –ü—Ä–∏–≤–µ—Ç, {username}, —è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.",
                "",
                "üó®Ô∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !–ø—Ä–æ–¥–∞–≤–µ—Ü, —á—Ç–æ–±—ã —è –ø—Ä–∏–≥–ª–∞—Å–∏–ª –µ–≥–æ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.",
                "",
                "üïπÔ∏è –ê –≤–æ–æ–±—â–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã"
            ],
            "command_error": [
                "‚úó –ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
            ],
            "command_incorrect_use_error": [
                "‚úó –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {correct_use}"
            ],
            "buyer_command_commands": [
                "üïπÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                "‚îó !–ø—Ä–æ–¥–∞–≤–µ—Ü ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –∏ –ø–æ–∑–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
            ],
            "buyer_command_seller": [
                "üí¨ –ü—Ä–æ–¥–∞–≤–µ—Ü –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É..."
            ],
            "order_confirmed": [
                "üåü –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤. –ñ–¥—É –≤–∞—Å –≤ —Å–≤–æ—ë–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, —É–¥–∞—á–∏!"
            ],
            "order_review_reply_text": [
                "üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {review_date}",
                "",
                "üõçÔ∏è –¢–æ–≤–∞—Ä: {order_title}",
                "",
                "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_amount} —à—Ç."
            ]
        },
    },
    "custom_commands": {
        "path": "bot_settings/custom_commands.json",
        "default": {}
    },
    "auto_deliveries": {
        "path": "bot_settings/auto_deliveries.json",
        "default": {}
    }
}


def validate_config(config, default):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.

    :param config: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥.
    :type config: `dict`

    :param default: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥–∞.
    :type default: `dict`

    :return: True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞, –∏–Ω–∞—á–µ False.
    :rtype: bool
    """
    for key, value in default.items():
        if key not in config:
            return False
        if type(config[key]) is not type(value):
            return False
        if isinstance(value, dict) and isinstance(config[key], dict):
            if not validate_config(config[key], value):
                return False
    return True

def restore_config(config: dict, default: dict):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
    –ò —É–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —à–∞–±–ª–æ–Ω–µ.

    :param config: –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥.
    :type config: `dict`

    :param default: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥–∞.
    :type default: `dict`

    :return: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥.
    :rtype: `dict`
    """
    config = copy.deepcopy(config)

    def check_default(config, default):
        for key, value in dict(default).items():
            if key not in config:
                config[key] = value
            elif type(value) is not type(config[key]):
                config[key] = value
            elif isinstance(value, dict) and isinstance(config[key], dict):
                check_default(config[key], value)
        return config

    config = check_default(config, default)
    return config
    
def get_json(path: str, default: dict) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å.

    :param path: –ü—É—Ç—å –∫ json —Ñ–∞–π–ª—É.
    :type path: `str`

    :param default: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞.
    :type default: `dict`
    """
    folder_path = os.path.dirname(path)
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    try:
        with open(path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        new_config = restore_config(config, default)
        if config != new_config:
            config = new_config
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
    except:
        config = default
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
    finally:
        return config
    
def set_json(path: str, new: dict):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :param path: –ü—É—Ç—å –∫ json —Ñ–∞–π–ª—É.
    :type path: `str`

    :param new: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.
    :type new: `dict`
    """
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(new, f, indent=4, ensure_ascii=False)

def configure_json(name: str, params: dict, accent_color: AnsiFore, 
                   data: dict | None = None):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param path: –ü—É—Ç—å –∫ json —Ñ–∞–π–ª—É.
    :type path: `str`

    :param default: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞.
    :type default: `dict`

    :param accent_color: –¶–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞.
    :type accent_color: `colorama.Fore`

    :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.
    :type params: `dict`
    """
    answers = {}
    config = Settings.get(name, data)

    def configure(params, default, config, prefix=""):
        for key, value in params.items():
            full_key = f"{accent_color}{prefix}{key}"
            if isinstance(value, dict) and "type" not in value:
                if key not in config:
                    config[key] = default[key]
                configure(value, default[key], config[key], prefix=full_key + f"{Fore.LIGHTWHITE_EX}.{accent_color}")
            else:
                full_key = full_key.replace(key, f"{Fore.LIGHTYELLOW_EX}{key}")
                not_stated_placeholder = "–ù–µ –∑–∞–¥–∞–Ω–æ"
                default_value = default.get(key, "")
                desc = "¬∑ " + "\n¬∑ ".join(value.get("desc", []))
                while True:
                    print(f"\n{Fore.LIGHTWHITE_EX}‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {full_key}{Fore.LIGHTWHITE_EX}."
                          f"\n{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {accent_color}{default_value if default_value else not_stated_placeholder}"
                          f"\n{Fore.WHITE}–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: \n{accent_color}{desc}"
                          f'\n{Fore.WHITE}–í–≤–æ–¥ {"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" if value.get("required") else "–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"}')
                    if not value.get("required"):
                        print(f"{Fore.LIGHTWHITE_EX}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {accent_color}{default_value if default_value else not_stated_placeholder}")
                    a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")

                    param_type = value.get("type")
                    if param_type is int:
                        if a:
                            try:
                                answers[key] = int(a)
                                config[key] = int(a)
                                print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{full_key} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {accent_color}{a}")
                                break
                            except ValueError:
                                print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        elif value.get("required"):
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        else:
                            answers[key] = default_value
                            config[key] = default_value
                            print(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {accent_color}{default_value if default_value else not_stated_placeholder}")
                            break
                    elif param_type is str:
                        if a:
                            answers[key] = str(a)
                            config[key] = str(a)
                            print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{full_key} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {accent_color}{a}")
                            break
                        elif value.get("required"):
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        else:
                            answers[key] = default_value
                            config[key] = default_value
                            print(f"{Fore.WHITE}–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {accent_color}{default_value if default_value else not_stated_placeholder}")
                            break
        return config

    print(f"\n{Fore.LIGHTWHITE_EX}‚Üì –í—Å–µ–≥–æ {accent_color}{len(params.keys())} {Fore.LIGHTWHITE_EX}—Ä–∞–∑–¥–µ–ª–∞(-–æ–≤) –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    new_config = configure(params, data[name]["default"], config)

    print(f"\n{Fore.LIGHTWHITE_EX}‚úì –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
          f"\n{Fore.WHITE}–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:"
          f"\n{Fore.WHITE}–ü–∞—Ä–∞–º–µ—Ç—Ä: {accent_color}*–≤–∞—à –æ—Ç–≤–µ—Ç*{Fore.WHITE} | {accent_color}*–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é*")
    print(f"{Fore.LIGHTWHITE_EX}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
    for answer_param in answers.keys():
        print(f"{Fore.WHITE}{answer_param}: {accent_color}{answers[answer_param]}{Fore.WHITE}")

    print(f"\n{Fore.WHITE}üíæ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ç–µ–∫—É—â–∏–º–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏? +/-")
    a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
    if a == "+":
        Settings.set(name, new_config, data)
        print(f"{Fore.LIGHTWHITE_EX}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥\n")
        return True
    else:
        print(f"\n{Fore.WHITE}–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∏—Ö —Å –Ω–∞—á–∞–ª–∞...")
        return configure_json(name, params, accent_color, data)

class Settings:
    
    @staticmethod
    def get(name, data: dict | None = None) -> dict:
        data = data if data is not None else DATA
        if name not in data:
            return None
        return get_json(data[name]["path"], data[name]["default"])

    @staticmethod
    def set(name, new, data: dict | None = None) -> dict:
        data = data if data is not None else DATA
        if name not in data:
            return None
        set_json(data[name]["path"], new)

    @staticmethod
    def configure(name, accent_color, params: dict | None = None, 
                  data: dict | None = None) -> dict:
        data = data if data is not None else DATA
        if name not in data:
            return None
        return configure_json(name, params if params else data[name]["params"], accent_color, data)