import json
from colorama import Fore, Style


class Config:
    def __init__(self):
        self.config_path = 'bot_settings/config.json'
    
    def get(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ """
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        except:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(Config.default_config(), f, indent=4, ensure_ascii=False)
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
        finally:
            return config
    
    def update(self, new_data) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥

        :param new_data: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥–∞
        """
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, indent=4, ensure_ascii=False)

    def default_config() -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞ """
        return {
            "golden_key": "",
            "user_agent": "",
            "tg_admin_id": 0,
            "tg_bot_token": "",
            "funpayapi_timeout": 30,
            "runner_requests_delay": 4,
            "first_message_enabled": True,
            "custom_commands_enabled": True,
            "auto_deliveries_enabled": True,
            "auto_raising_lots_enabled": True,
            "lots_saving_interval": 3600,
            "auto_reviews_replies_enabled": True,
        }
    
    def configure_config(self):
        """ –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ñ–∏–≥–∞ """

        # –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        params = {
            "golden_key": {
                "required": True,
                "type": str,
                "desc": [
                    "golden_key –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ FunPay, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–ª —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
                    "–ï–≥–æ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ cookie —Å–∞–π—Ç–∞ funpay.com. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º Cookie-Editor."
                ]
            },
            "user_agent": {
                "required": False,
                "type": str,
                "desc": [
                    "–Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–ª —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.",
                    "–£–∑–Ω–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ: –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://www.whatismybrowser.com/detect/what-is-my-user-agent/ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —Å–∏–Ω–µ–º –æ–∫–æ—à–∫–µ."
                ]
            },
            "funpayapi_timeout": {
                "required": False,
                "type": int,
                "desc": [
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ funpay.com. –ï—Å–ª–∏ —É –≤–∞—Å –ø–ª–æ—Ö–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ. –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."
                ]
            },
            "runner_requests_delay": {
                "required": False,
                "type": int,
                "desc": [
                    "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ funpay.com –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∏–∂–µ 4, ",
                    "–≤ –≤–∏–¥—É –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã FunPay. –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."
                ]
            },
            "tg_admin_id": {
                "required": True,
                "type": int,
                "desc": [
                    "ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞. –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –±–æ—Ç–∞ @myidbot. –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º ID —Å–º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º."
                ]
            },
            "tg_bot_token": {
                "required": True,
                "type": str,
                "desc": [
                    "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –í TG –±–æ—Ç–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.",
                    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —É @BotFather. –ü–∏—à–∏—Ç–µ /newbot –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
                ]
            }
        }

        config = self.get()
        answers = {}
        print(f"\n{Fore.LIGHTWHITE_EX}‚Üì –í—Å–µ–≥–æ {Fore.LIGHTYELLOW_EX}{len(params.keys())} {Fore.LIGHTWHITE_EX}–ø–∞—Ä–∞–º–µ—Ç—Ä–∞(-–æ–≤), –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ ( Õ°¬∞ Õú ñ Õ°¬∞)")
        i=0
        for param in params.keys():
            if param in config:
                i+=1
                required = f"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" if params[param]["required"] == True else f"–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"
                default_value = config[param] if config[param] else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                desc = "¬∑ " + "\n¬∑ ".join(params[param]["desc"])
                print(f"\n{Fore.LIGHTWHITE_EX}‚öôÔ∏è {i}. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTYELLOW_EX}{param}."
                      f"\n{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTYELLOW_EX}{default_value}"
                      f"\n{Fore.WHITE}–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: \n{Fore.LIGHTYELLOW_EX}{desc}"
                      f"\n{Fore.WHITE}–í–≤–æ–¥ {required}")
                if not params[param]["required"]:
                    print(f"{Fore.LIGHTWHITE_EX}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTYELLOW_EX}{default_value}")
                a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
                
                if params[param]["type"] is int:
                    try:
                        if int(a) > 0:
                            print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{param} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {Fore.LIGHTYELLOW_EX}{a}")
                            answers[param] = int(a)
                            continue
                        elif int(a) <= 0:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                            break
                    except:
                        if not a and not params[param]["required"]:
                            answers[param] = default_value
                            print(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTYELLOW_EX}{default_value}")
                        elif not a and params[param]["required"]:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                            break
                        else:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º")
                            break
                elif params[param]["type"] is str:
                    try:
                        if len(a) > 0:
                            print(f"{Fore.WHITE}–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {Fore.LIGHTWHITE_EX}{param} {Fore.WHITE}–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {Fore.LIGHTYELLOW_EX}{a}")
                            answers[param] = str(a)
                            continue
                        elif not a and params[param]["required"]:
                            print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ")
                            break
                        elif not a and not params[param]["required"]:
                            answers[param] = default_value
                            print(f"{Fore.WHITE}–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Fore.LIGHTYELLOW_EX}{default_value}")
                    except:
                        print(f"{Fore.LIGHTRED_EX}‚úó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º")
                        break
        else:
            print(f"\n{Fore.LIGHTWHITE_EX}‚úì –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            print(f"{Fore.WHITE}–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
            print(f"{Fore.WHITE}–ü–∞—Ä–∞–º–µ—Ç—Ä: {Fore.LIGHTYELLOW_EX}*–≤–∞—à –æ—Ç–≤–µ—Ç*{Fore.WHITE} | {Fore.LIGHTYELLOW_EX}*–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é*")
            print(f"{Fore.LIGHTWHITE_EX}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
            for answer_param in answers.keys():
                default_value = config[answer_param] if config[answer_param] else "–ù–µ –∑–∞–¥–∞–Ω–æ"
                print(f"{Fore.WHITE}{answer_param}: {Fore.LIGHTYELLOW_EX}{answers[answer_param]}{Fore.WHITE} | {Fore.LIGHTYELLOW_EX}{default_value}")
            print(f"\n{Fore.WHITE}üíæ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ç–µ–∫—É—â–∏–º–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏? +/-")
            a = input(f"{Fore.WHITE}> ")

            if a == "+":
                for answer_param in answers.keys():
                    config[answer_param] = answers[answer_param]
                    Config().update(config)
                print(f"{Fore.LIGHTWHITE_EX}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥\n")
                return True
            else:
                print(f"\n{Fore.WHITE}–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∏—Ö —Å –Ω–∞—á–∞–ª–∞...")
                return self.configure_config()
        print(f"{Fore.WHITE}–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏ –ø–æ—ç—Ç–æ–º—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        return self.configure_config()
    
class Messages:
    def __init__(self):
        self.messages_path = 'bot_settings/messages.json'

    def default_messages(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π """
        return {
            "new_order": [
                "üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.",
                "",
                "¬∑ üëÄ –í–∏–∂—É, –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ #{order_id}.",
                "",
                "¬∑ üó®Ô∏è –°–µ–π—á–∞—Å –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤ —Å–µ—Ç–∏, –ø–æ—ç—Ç–æ–º—É —á—Ç–æ–±—ã –ø–æ–∑–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !–ø—Ä–æ–¥–∞–≤–µ—Ü –∏ —è –ø—Ä–∏–≥–ª–∞—à—É –µ–≥–æ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.",
                "",
                "¬∑ üïπÔ∏è –ê –≤–æ–æ–±—â–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã"
            ],
            "user_not_initialized": [
                "üëã –ü—Ä–∏–≤–µ—Ç {buyer_username}, —è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.",
                "",
                "¬∑ üó®Ô∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !–ø—Ä–æ–¥–∞–≤–µ—Ü, —á—Ç–æ–±—ã —è –ø—Ä–∏–≥–ª–∞—Å–∏–ª –µ–≥–æ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.",
                "",
                "¬∑ üïπÔ∏è –ê –≤–æ–æ–±—â–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã"
            ],
            "command_error": [
                "‚úó –ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
            ],
            "command_incorrect_use_error": [
                "‚úó –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {correct_use}"
            ],
            "buyer_command_commands": [
                "üïπÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                "‚Üí !–ø—Ä–æ–¥–∞–≤–µ—Ü ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –∏ –ø–æ–∑–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
            ],
            "buyer_command_seller": [
                "üí¨ –ü—Ä–æ–¥–∞–≤–µ—Ü –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∏–∞–ª–æ–≥—É..."
            ],
            "order_confirmed": [
                "üåü –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤. –ñ–¥—É –≤–∞—Å –≤ —Å–≤–æ—ë–º –º–∞–≥–∞–∑–∏–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, —É–¥–∞—á–∏!"
            ],
            "order_review_reply_text": [
                "üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {review_date}",
                "",
                "üõçÔ∏è –¢–æ–≤–∞—Ä: {order_title}",
                "",
                "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_amount} —à—Ç."
            ]
        }
    
    def get(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ """
        try:
            with open(self.messages_path, 'r', encoding='utf-8') as f:
                messages = json.load(f)
        except:
            with open(self.messages_path, 'w', encoding='utf-8') as f:
                json.dump(self.default_messages(), f, indent=4, ensure_ascii=False)
            with open(self.messages_path, 'r', encoding='utf-8') as f:
                messages = json.load(f)
        finally:
            return messages
        
    def update(self, new_data) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è

        :param new_data: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        with open(self.messages_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, indent=4, ensure_ascii=False)

class CustomCommands:
    def __init__(self):
        self.custom_commands_path = 'bot_settings/custom_commands.json'

    def default_custom_commands(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ """
        return {
            "!—Ç–µ—Å—Ç": [
                "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üëã. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.",
                "¬©Ô∏è ùêÖùêÆùêßùêèùêöùê≤ ùêîùêßùê¢ùêØùêûùê´ùê¨ùêöùê•",
            ]
        }
    
    def get(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ """
        try:
            with open(self.custom_commands_path, 'r', encoding='utf-8') as f:
                custom_commands = json.load(f)
        except:
            with open(self.custom_commands_path, 'w', encoding='utf-8') as f:
                json.dump(self.default_custom_commands(), f, indent=4, ensure_ascii=False)
            with open(self.custom_commands_path, 'r', encoding='utf-8') as f:
                custom_commands = json.load(f)
        finally:
            return custom_commands
        
    def update(self, new_data) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

        :param new_data: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        """
        with open(self.custom_commands_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, indent=4, ensure_ascii=False)

class AutoDeliveries:
    def __init__(self):
        self.auto_deliveries_path = 'bot_settings/auto_deliveries.json'

    def default_auto_deliveries(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–≤—Ç–æ-–≤—ã–¥–∞—á """
        return {
            "1234567890": [
                "–í–æ—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:",
                "- –õ–æ–≥–∏–Ω: login123",
                "- –ü–∞—Ä–æ–ª—å: password123",
                "¬©Ô∏è ùêÖùêÆùêßùêèùêöùê≤ ùêîùêßùê¢ùêØùêûùê´ùê¨ùêöùê•"
            ]
        }
    
    def get(self) -> dict:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ """
        try:
            with open(self.auto_deliveries_path, 'r', encoding='utf-8') as f:
                auto_deliveries = json.load(f)
        except:
            with open(self.auto_deliveries_path, 'w', encoding='utf-8') as f:
                json.dump(self.default_auto_deliveries(), f, indent=4, ensure_ascii=False)
            with open(self.auto_deliveries_path, 'r', encoding='utf-8') as f:
                auto_deliveries = json.load(f)
        finally:
            return auto_deliveries
        
    def update(self, new_data) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏

        :param new_data: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ-–≤—ã–¥–∞—á
        """
        with open(self.auto_deliveries_path, 'w', encoding='utf-8') as f:
            json.dump(new_data, f, indent=4, ensure_ascii=False)